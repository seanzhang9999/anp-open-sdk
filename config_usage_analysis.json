{
  "summary": {
    "total_config_usages": 80,
    "files_with_config": 15,
    "unique_config_keys": 29,
    "analysis_timestamp": "/Users/seanzhang/seanrework/anp-open-sdk"
  },
  "detailed_usages": [
    {
      "file": "anp_runtime/agent_manager.py",
      "line": 583,
      "type": "config_access",
      "config_key": "get",
      "code": "path_mappings = config.get('path_mappings', {})",
      "context": [
        "            return None, None",
        "",
        "        config = self.shared_did_registry[shared_did]",
        "        path_mappings = config.get('path_mappings', {})",
        "",
        "        # 精确匹配",
        "        if api_path in path_mappings:"
      ],
      "function": "_resolve_shared_did",
      "class": "AgentRouter"
    },
    {
      "file": "anp_runtime/agent_manager.py",
      "line": 847,
      "type": "config_access",
      "config_key": "get",
      "code": "if share_config.get('enabled'):",
      "context": [
        "        # 检查共享DID配置",
        "        share_did_config = None",
        "        share_config = cfg.get('share_did', {})",
        "        if share_config.get('enabled'):",
        "            share_did_config = {",
        "                'shared_did': share_config['shared_did'],",
        "                'path_prefix': share_config.get('path_prefix', ''),"
      ],
      "function": "load_agent_from_module",
      "class": "LocalAgentManager"
    },
    {
      "file": "anp_runtime/agent_manager.py",
      "line": 850,
      "type": "config_access",
      "config_key": "get",
      "code": "'path_prefix': share_config.get('path_prefix', ''),",
      "context": [
        "        if share_config.get('enabled'):",
        "            share_did_config = {",
        "                'shared_did': share_config['shared_did'],",
        "                'path_prefix': share_config.get('path_prefix', ''),",
        "                'primary_agent': share_config.get('primary_agent', False),  # 默认为副Agent",
        "                'api_paths': [api['path'] for api in cfg.get('api', [])]",
        "            }"
      ],
      "function": "load_agent_from_module",
      "class": "LocalAgentManager"
    },
    {
      "file": "anp_runtime/agent_manager.py",
      "line": 851,
      "type": "config_access",
      "config_key": "get",
      "code": "'primary_agent': share_config.get('primary_agent', False),  # 默认为副Agent",
      "context": [
        "            share_did_config = {",
        "                'shared_did': share_config['shared_did'],",
        "                'path_prefix': share_config.get('path_prefix', ''),",
        "                'primary_agent': share_config.get('primary_agent', False),  # 默认为副Agent",
        "                'api_paths': [api['path'] for api in cfg.get('api', [])]",
        "            }",
        "            logger.debug(f\"  -> 检测到共享DID配置: {share_did_config}\")"
      ],
      "function": "load_agent_from_module",
      "class": "LocalAgentManager"
    },
    {
      "file": "anp_runtime/agent_manager.py",
      "line": 874,
      "type": "config_access",
      "config_key": "get",
      "code": "if not share_did_config.get('path_prefix'):",
      "context": [
        "        # 创建新的Agent实例 - 全面使用新Agent系统",
        "        if share_did_config:",
        "            # 确保共享DID配置完整",
        "            if not share_did_config.get('path_prefix'):",
        "                raise ValueError(f\"❌ 共享DID配置缺少 path_prefix: {base_module_name}\")",
        "",
        "            anp_agent = AgentManager.create_agent("
      ],
      "function": "load_agent_from_module",
      "class": "LocalAgentManager"
    },
    {
      "file": "anp_runtime/agent_manager.py",
      "line": 880,
      "type": "config_access",
      "config_key": "get",
      "code": "prefix=share_did_config.get('path_prefix', ''),",
      "context": [
        "            anp_agent = AgentManager.create_agent(",
        "                anp_user_did,  cfg['name'],",
        "                shared=True,",
        "                prefix=share_did_config.get('path_prefix', ''),",
        "                primary_agent=share_did_config.get('primary_agent', False)",
        "            )",
        "        else:"
      ],
      "function": "load_agent_from_module",
      "class": "LocalAgentManager"
    },
    {
      "file": "anp_runtime/agent_manager.py",
      "line": 881,
      "type": "config_access",
      "config_key": "get",
      "code": "primary_agent=share_did_config.get('primary_agent', False)",
      "context": [
        "                anp_user_did,  cfg['name'],",
        "                shared=True,",
        "                prefix=share_did_config.get('path_prefix', ''),",
        "                primary_agent=share_did_config.get('primary_agent', False)",
        "            )",
        "        else:",
        "            anp_agent = AgentManager.create_agent(anp_user_did, cfg['name'], shared=False)"
      ],
      "function": "load_agent_from_module",
      "class": "LocalAgentManager"
    },
    {
      "file": "anp_runtime/agent_manager.py",
      "line": 937,
      "type": "config_access",
      "config_key": "get",
      "code": "is_primary = share_did_config.get('primary_agent', False)",
      "context": [
        "        # 检查是否是共享DID模式但不是主Agent",
        "        is_shared_non_primary = False",
        "        if share_did_config:  # 只检查share_did_config是否存在",
        "            is_primary = share_did_config.get('primary_agent', False)",
        "            if not is_primary:",
        "                is_shared_non_primary = True",
        "                logger.info(f\"ℹ️ 注意: {cfg.get('name')} 是共享DID的非主Agent，将跳过消息处理器注册 (这是预期行为)\")"
      ],
      "function": "_register_message_handlers_new",
      "class": "LocalAgentManager"
    },
    {
      "file": "anp_server/run_lite_server_template.py",
      "line": 61,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "",
        "        self.logger = logger",
        "        self.initialized = True",
        "        config = get_global_config()",
        "        self.debug_mode = config.anp_sdk.debug_mode",
        "        if self.debug_mode:",
        "            self.app = FastAPI("
      ],
      "function": "__init__",
      "class": "ANP_Server"
    },
    {
      "file": "anp_server/run_lite_server_template.py",
      "line": 117,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        from anp_foundation.config import get_global_config",
        "",
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host",
        ""
      ],
      "function": "start_server",
      "class": "ANP_Server"
    },
    {
      "file": "anp_server/run_lite_server_template.py",
      "line": 62,
      "type": "config_access",
      "config_key": "anp_sdk.debug_mode",
      "code": "self.debug_mode = config.anp_sdk.debug_mode",
      "context": [
        "        self.logger = logger",
        "        self.initialized = True",
        "        config = get_global_config()",
        "        self.debug_mode = config.anp_sdk.debug_mode",
        "        if self.debug_mode:",
        "            self.app = FastAPI(",
        "                title=\"ANP DID Server in DebugMode\","
      ],
      "function": "__init__",
      "class": "ANP_Server"
    },
    {
      "file": "anp_server/run_lite_server_template.py",
      "line": 118,
      "type": "config_access",
      "config_key": "anp_sdk.port",
      "code": "port = config.anp_sdk.port",
      "context": [
        "",
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host",
        "",
        "        app_instance = self.app"
      ],
      "function": "start_server",
      "class": "ANP_Server"
    },
    {
      "file": "anp_server/run_lite_server_template.py",
      "line": 119,
      "type": "config_access",
      "config_key": "anp_sdk.host",
      "code": "host = config.anp_sdk.host",
      "context": [
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host",
        "",
        "        app_instance = self.app",
        ""
      ],
      "function": "start_server",
      "class": "ANP_Server"
    },
    {
      "file": "anp_server/baseline/anp_server_baseline.py",
      "line": 56,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "",
        "        self.logger = logger",
        "        self.initialized = True",
        "        config = get_global_config()",
        "        self.debug_mode = config.anp_sdk.debug_mode",
        "",
        ""
      ],
      "function": "__init__",
      "class": "ANP_Server"
    },
    {
      "file": "anp_server/baseline/anp_server_baseline.py",
      "line": 116,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        from anp_foundation.config import get_global_config",
        "",
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()",
        "",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host"
      ],
      "function": "start_server",
      "class": "ANP_Server"
    },
    {
      "file": "anp_server/baseline/anp_server_baseline.py",
      "line": 57,
      "type": "config_access",
      "config_key": "anp_sdk.debug_mode",
      "code": "self.debug_mode = config.anp_sdk.debug_mode",
      "context": [
        "        self.logger = logger",
        "        self.initialized = True",
        "        config = get_global_config()",
        "        self.debug_mode = config.anp_sdk.debug_mode",
        "",
        "",
        "        if self.debug_mode:"
      ],
      "function": "__init__",
      "class": "ANP_Server"
    },
    {
      "file": "anp_server/baseline/anp_server_baseline.py",
      "line": 118,
      "type": "config_access",
      "config_key": "anp_sdk.port",
      "code": "port = config.anp_sdk.port",
      "context": [
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()",
        "",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host",
        "",
        "        app_instance = self.app"
      ],
      "function": "start_server",
      "class": "ANP_Server"
    },
    {
      "file": "anp_server/baseline/anp_server_baseline.py",
      "line": 119,
      "type": "config_access",
      "config_key": "anp_sdk.host",
      "code": "host = config.anp_sdk.host",
      "context": [
        "        config = get_global_config()",
        "",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host",
        "",
        "        app_instance = self.app",
        ""
      ],
      "function": "start_server",
      "class": "ANP_Server"
    },
    {
      "file": "anp_servicepoint/auth_exempt_handler.py",
      "line": 5,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "",
        "from anp_foundation.config import get_global_config",
        "",
        "config = get_global_config()",
        "EXEMPT_PATHS = config.auth_middleware.exempt_paths",
        "",
        ""
      ],
      "function": "unknown",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/auth_exempt_handler.py",
      "line": 6,
      "type": "config_access",
      "config_key": "auth_middleware.exempt_paths",
      "code": "EXEMPT_PATHS = config.auth_middleware.exempt_paths",
      "context": [
        "from anp_foundation.config import get_global_config",
        "",
        "config = get_global_config()",
        "EXEMPT_PATHS = config.auth_middleware.exempt_paths",
        "",
        "",
        "def is_exempt(path):"
      ],
      "function": "unknown",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/extend_service_implementation/did_host/did_host_manager.py",
      "line": 35,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "            self.hostport = str(port)",
        "        else:",
        "            # 兼容模式：使用现有逻辑",
        "            config = get_global_config()",
        "            self.hosted_dir = Path(hosted_dir or config.anp_sdk.user_hosted_path)",
        "            self.hostdomain = os.environ.get('HOST_DID_DOMAIN', 'localhost')",
        "            self.hostport = os.environ.get('HOST_DID_PORT', '9527')"
      ],
      "function": "__init__",
      "class": "DIDHostManager"
    },
    {
      "file": "anp_servicepoint/extend_service_implementation/did_host/did_host_manager.py",
      "line": 36,
      "type": "config_access",
      "config_key": "anp_sdk.user_hosted_path",
      "code": "self.hosted_dir = Path(hosted_dir or config.anp_sdk.user_hosted_path)",
      "context": [
        "        else:",
        "            # 兼容模式：使用现有逻辑",
        "            config = get_global_config()",
        "            self.hosted_dir = Path(hosted_dir or config.anp_sdk.user_hosted_path)",
        "            self.hostdomain = os.environ.get('HOST_DID_DOMAIN', 'localhost')",
        "            self.hostport = os.environ.get('HOST_DID_PORT', '9527')",
        "            "
      ],
      "function": "__init__",
      "class": "DIDHostManager"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 32,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        Dict[str, Any]: 处理结果",
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        ""
      ],
      "function": "process_group_request",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 100,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        Dict[str, Any]: 处理结果",
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        ""
      ],
      "function": "process_agent_api_request",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 200,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        Dict[str, Any]: 处理结果",
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        ""
      ],
      "function": "process_agent_message",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 33,
      "type": "config_access",
      "config_key": "anp_sdk",
      "code": "use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
      "context": [
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        "",
        "    # 根据配置决定处理方式"
      ],
      "function": "process_group_request",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 34,
      "type": "config_access",
      "config_key": "anp_sdk",
      "code": "transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
      "context": [
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        "",
        "    # 根据配置决定处理方式",
        "    if use_transformer_server:"
      ],
      "function": "process_group_request",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 67,
      "type": "config_access",
      "config_key": "anp_sdk",
      "code": "if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
      "context": [
        "                    else:",
        "                        error_text = await response.text()",
        "                        logger.error(f\"❌ Framework server返回错误: {response.status} - {error_text}\")",
        "                        if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
        "                            return {\"status\": \"error\", \"message\": f\"Framework server错误: {response.status}\"}",
        "        except Exception as e:",
        "            logger.error(f\"❌ 转发到Framework server失败: {e}\")"
      ],
      "function": "process_group_request",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 71,
      "type": "config_access",
      "config_key": "anp_sdk",
      "code": "if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
      "context": [
        "                            return {\"status\": \"error\", \"message\": f\"Framework server错误: {response.status}\"}",
        "        except Exception as e:",
        "            logger.error(f\"❌ 转发到Framework server失败: {e}\")",
        "            if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
        "                return {\"status\": \"error\", \"message\": f\"Framework server连接失败: {str(e)}\"}",
        "",
        "    # 本地处理"
      ],
      "function": "process_group_request",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 101,
      "type": "config_access",
      "config_key": "anp_sdk",
      "code": "use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
      "context": [
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        "",
        "    # 构造请求数据"
      ],
      "function": "process_agent_api_request",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 102,
      "type": "config_access",
      "config_key": "anp_sdk",
      "code": "transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
      "context": [
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        "",
        "    # 构造请求数据",
        "    processed_data = {"
      ],
      "function": "process_agent_api_request",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 151,
      "type": "config_access",
      "config_key": "anp_sdk",
      "code": "if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
      "context": [
        "                        error_text = await response.text()",
        "                        logger.error(f\"❌ transformer server返回错误: {response.status} - {error_text}\")",
        "                        # 失败时回退到本地处理",
        "                        if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
        "                            return {\"status\": \"error\", \"message\": f\"transformer server错误: {response.status}\",",
        "                                    \"details\": error_text}",
        "        except Exception as e:"
      ],
      "function": "process_agent_api_request",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 157,
      "type": "config_access",
      "config_key": "anp_sdk",
      "code": "if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"❌ transformer server失败: {e}\")",
        "            # 失败时回退到本地处理",
        "            if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
        "                return {\"status\": \"error\", \"message\": f\"transformer server连接失败: {str(e)}\"}",
        "            logger.debug(\"⚠️ 回退到本地处理\")",
        ""
      ],
      "function": "process_agent_api_request",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 201,
      "type": "config_access",
      "config_key": "anp_sdk",
      "code": "use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
      "context": [
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        "",
        "    # 构造请求数据"
      ],
      "function": "process_agent_message",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 202,
      "type": "config_access",
      "config_key": "anp_sdk",
      "code": "transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
      "context": [
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        "",
        "    # 构造请求数据",
        "    processed_data = {"
      ],
      "function": "process_agent_message",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 250,
      "type": "config_access",
      "config_key": "anp_sdk",
      "code": "if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
      "context": [
        "                        error_text = await response.text()",
        "                        logger.error(f\"❌ transformer server返回错误: {response.status} - {error_text}\")",
        "                        # 失败时回退到本地处理",
        "                        if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
        "                            return {\"anp_result\": {\"status\": \"error\",",
        "                                                   \"message\": f\"transformer server错误: {response.status}\"}}",
        "        except Exception as e:"
      ],
      "function": "process_agent_message",
      "class": "unknown"
    },
    {
      "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 256,
      "type": "config_access",
      "config_key": "anp_sdk",
      "code": "if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"❌ transformer server失败: {e}\")",
        "            # 失败时回退到本地处理",
        "            if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
        "                return {\"anp_result\": {\"status\": \"error\", \"message\": f\"transformer server连接失败: {str(e)}\"}}",
        "            logger.debug(\"⚠️ 回退到本地处理\")",
        ""
      ],
      "function": "process_agent_message",
      "class": "unknown"
    },
    {
      "file": "anp_foundation/anp_user_local_data.py",
      "line": 188,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    def __init__(self, user_dir: Optional[str] = None):",
        "        if hasattr(self, '_initialized') and self._initialized:",
        "            return",
        "        config = get_global_config()",
        "        self._user_dir = user_dir or config.anp_sdk.user_did_path",
        "",
        "        # 提供多种索引方式，提高查询效率"
      ],
      "function": "__init__",
      "class": "LocalUserDataManager"
    },
    {
      "file": "anp_foundation/anp_user_local_data.py",
      "line": 703,
      "type": "get_global_config",
      "code": "config=get_global_config()",
      "context": [
        "    if not all(field in user_iput for field in required_fields):",
        "        logger.error(\"缺少必需的参数字段\")",
        "        return None",
        "    config=get_global_config()",
        "",
        "    userdid_filepath = config.anp_sdk.user_did_path",
        "    userdid_filepath = UnifiedConfig.resolve_path(userdid_filepath)"
      ],
      "function": "create_did_user",
      "class": "LocalUserDataManager"
    },
    {
      "file": "anp_foundation/anp_user_local_data.py",
      "line": 189,
      "type": "config_access",
      "config_key": "anp_sdk.user_did_path",
      "code": "self._user_dir = user_dir or config.anp_sdk.user_did_path",
      "context": [
        "        if hasattr(self, '_initialized') and self._initialized:",
        "            return",
        "        config = get_global_config()",
        "        self._user_dir = user_dir or config.anp_sdk.user_did_path",
        "",
        "        # 提供多种索引方式，提高查询效率",
        "        self.users_by_did: Dict[str, LocalUserData] = {}"
      ],
      "function": "__init__",
      "class": "LocalUserDataManager"
    },
    {
      "file": "anp_foundation/anp_user_local_data.py",
      "line": 705,
      "type": "config_access",
      "config_key": "anp_sdk.user_did_path",
      "code": "userdid_filepath = config.anp_sdk.user_did_path",
      "context": [
        "        return None",
        "    config=get_global_config()",
        "",
        "    userdid_filepath = config.anp_sdk.user_did_path",
        "    userdid_filepath = UnifiedConfig.resolve_path(userdid_filepath)",
        "",
        ""
      ],
      "function": "create_did_user",
      "class": "LocalUserDataManager"
    },
    {
      "file": "anp_foundation/anp_user_local_data.py",
      "line": 244,
      "type": "config_access",
      "config_key": "anp_sdk.user_did_key_id",
      "code": "key_id = get_global_config().anp_sdk.user_did_key_id  # 使用默认值作为后备",
      "context": [
        "",
        "                if not key_id:",
        "                    logger.warning(f\"无法在 {folder_name} 的DID文档中确定key_id\")",
        "                    key_id = get_global_config().anp_sdk.user_did_key_id  # 使用默认值作为后备",
        "",
        "                password_paths = {",
        "                    \"did_private_key_file_path\": os.path.join(user_folder_path, f\"{key_id}_private.pem\"),"
      ],
      "function": "load_all_users",
      "class": "LocalUserDataManager"
    },
    {
      "file": "anp_foundation/anp_user_local_data.py",
      "line": 514,
      "type": "config_access",
      "config_key": "anp_sdk.user_did_key_id",
      "code": "key_id = get_global_config().anp_sdk.user_did_key_id",
      "context": [
        "            # 构建密钥路径",
        "            key_id = self.parse_key_id_from_did_doc(did_doc)",
        "            if not key_id:",
        "                key_id = get_global_config().anp_sdk.user_did_key_id",
        "",
        "            password_paths = {",
        "                \"did_private_key_file_path\": os.path.join(user_folder_path, f\"{key_id}_private.pem\"),"
      ],
      "function": "load_single_user",
      "class": "LocalUserDataManager"
    },
    {
      "file": "anp_foundation/anp_user.py",
      "line": 77,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "            logger.debug(f\"🆕 缓存ANPUser实例 (直接构造): {self.id}\")",
        "        else:",
        "            logger.debug(f\"🔄 ANPUser实例已存在于缓存中: {self.id}\")",
        "        config = get_global_config()",
        "        self.key_id = config.anp_sdk.user_did_key_id",
        "",
        "        self.did_document_path = self.user_data.did_doc_path"
      ],
      "function": "__init__",
      "class": "ANPUser"
    },
    {
      "file": "anp_foundation/anp_user.py",
      "line": 78,
      "type": "config_access",
      "config_key": "anp_sdk.user_did_key_id",
      "code": "self.key_id = config.anp_sdk.user_did_key_id",
      "context": [
        "        else:",
        "            logger.debug(f\"🔄 ANPUser实例已存在于缓存中: {self.id}\")",
        "        config = get_global_config()",
        "        self.key_id = config.anp_sdk.user_did_key_id",
        "",
        "        self.did_document_path = self.user_data.did_doc_path",
        "        self.private_key_path = self.user_data.did_private_key_file_path"
      ],
      "function": "__init__",
      "class": "ANPUser"
    },
    {
      "file": "anp_foundation/did/did_tool.py",
      "line": 69,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        # Calculate time difference",
        "        time_diff = abs((current_time - request_time).total_seconds() / 60)",
        "",
        "        config = get_global_config()",
        "        nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
        "",
        "        # Verify timestamp is within valid period"
      ],
      "function": "verify_timestamp",
      "class": "AuthenticationContext"
    },
    {
      "file": "anp_foundation/did/did_tool.py",
      "line": 311,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    Returns:",
        "        str: Encoded JWT token",
        "    \"\"\"",
        "    config = get_global_config()",
        "    token_expire_time = config.anp_sdk.token_expire_time",
        "",
        "    to_encode = data.copy()"
      ],
      "function": "create_access_token",
      "class": "AuthenticationContext"
    },
    {
      "file": "anp_foundation/did/did_tool.py",
      "line": 70,
      "type": "config_access",
      "config_key": "anp_sdk.nonce_expire_minutes",
      "code": "nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
      "context": [
        "        time_diff = abs((current_time - request_time).total_seconds() / 60)",
        "",
        "        config = get_global_config()",
        "        nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
        "",
        "        # Verify timestamp is within valid period",
        "        if time_diff > nonce_expire_minutes:"
      ],
      "function": "verify_timestamp",
      "class": "AuthenticationContext"
    },
    {
      "file": "anp_foundation/did/did_tool.py",
      "line": 312,
      "type": "config_access",
      "config_key": "anp_sdk.token_expire_time",
      "code": "token_expire_time = config.anp_sdk.token_expire_time",
      "context": [
        "        str: Encoded JWT token",
        "    \"\"\"",
        "    config = get_global_config()",
        "    token_expire_time = config.anp_sdk.token_expire_time",
        "",
        "    to_encode = data.copy()",
        "    expires = datetime.now(timezone.utc) + (timedelta(minutes=expires_delta) if expires_delta else timedelta(seconds=token_expire_time))"
      ],
      "function": "create_access_token",
      "class": "AuthenticationContext"
    },
    {
      "file": "anp_foundation/did/did_tool.py",
      "line": 322,
      "type": "config_access",
      "config_key": "anp_sdk.jwt_algorithm",
      "code": "jwt_algorithm = config.anp_sdk.jwt_algorithm",
      "context": [
        "        logger.debug(\"Invalid JWT private key object provided\")",
        "        raise HTTPException(status_code=500, detail=\"Internal anp_servicepoint error during token generation\")",
        "",
        "    jwt_algorithm = config.anp_sdk.jwt_algorithm",
        "    # Create the JWT token using RS256 algorithm with private key",
        "    encoded_jwt = jwt.encode(",
        "        to_encode,"
      ],
      "function": "create_access_token",
      "class": "AuthenticationContext"
    },
    {
      "file": "anp_foundation/did/did_format_manager.py",
      "line": 37,
      "type": "get_global_config",
      "code": "self.config = get_global_config()",
      "context": [
        "    ",
        "    def __init__(self):",
        "        \"\"\"初始化DID格式管理器\"\"\"",
        "        self.config = get_global_config()",
        "        self.domain_manager = get_domain_manager()",
        "        self._format_cache = {}",
        "        "
      ],
      "function": "__init__",
      "class": "DidFormatManager"
    },
    {
      "file": "anp_foundation/did/did_format_manager.py",
      "line": 233,
      "type": "config_access",
      "config_key": "did_config.creatable_user_types",
      "code": "creatable_types = self.config.did_config.creatable_user_types",
      "context": [
        "            bool: 是否可以创建",
        "        \"\"\"",
        "        try:",
        "            creatable_types = self.config.did_config.creatable_user_types",
        "            return user_type in creatable_types",
        "        except AttributeError:",
        "            # 配置中没有相关设置，默认只允许创建user类型"
      ],
      "function": "can_create_user_type",
      "class": "DidFormatManager"
    },
    {
      "file": "anp_foundation/did/did_format_manager.py",
      "line": 329,
      "type": "config_access",
      "config_key": "did_config.format_template",
      "code": "return self.config.did_config.format_template",
      "context": [
        "    def _get_format_template(self) -> str:",
        "        \"\"\"获取DID格式模板\"\"\"",
        "        try:",
        "            return self.config.did_config.format_template",
        "        except AttributeError:",
        "            return \"did:{method}:{host}:{method}:{user_type}:{user_id}\"",
        "    "
      ],
      "function": "_get_format_template",
      "class": "DidFormatManager"
    },
    {
      "file": "anp_foundation/did/did_format_manager.py",
      "line": 336,
      "type": "config_access",
      "config_key": "did_config.method",
      "code": "return self.config.did_config.method",
      "context": [
        "    def _get_method(self) -> str:",
        "        \"\"\"获取DID方法名\"\"\"",
        "        try:",
        "            return self.config.did_config.method",
        "        except AttributeError:",
        "            return \"wba\"",
        "    "
      ],
      "function": "_get_method",
      "class": "DidFormatManager"
    },
    {
      "file": "anp_foundation/did/did_format_manager.py",
      "line": 360,
      "type": "config_access",
      "config_key": "did_config.user_types",
      "code": "user_types = self.config.did_config.user_types",
      "context": [
        "            List[str]: 用户类型列表",
        "        \"\"\"",
        "        try:",
        "            user_types = self.config.did_config.user_types",
        "            if hasattr(user_types, 'user'):",
        "                return [user_types.user, user_types.hostuser, user_types.test]",
        "            elif hasattr(user_types, 'values'):"
      ],
      "function": "get_supported_user_types",
      "class": "DidFormatManager"
    },
    {
      "file": "anp_foundation/did/did_format_manager.py",
      "line": 390,
      "type": "config_access",
      "config_key": "did_config.creatable_user_types",
      "code": "return list(self.config.did_config.creatable_user_types)",
      "context": [
        "            List[str]: 可创建的用户类型列表",
        "        \"\"\"",
        "        try:",
        "            return list(self.config.did_config.creatable_user_types)",
        "        except AttributeError:",
        "            return [\"user\"]",
        "    "
      ],
      "function": "get_creatable_user_types",
      "class": "DidFormatManager"
    },
    {
      "file": "anp_foundation/config/__init__.py",
      "line": 18,
      "type": "config_access",
      "config_key": "py",
      "code": "- 统一配置管理（unified_config.py）",
      "context": [
        "\"\"\"ANP Open SDK 配置模块",
        "",
        "提供统一的配置管理功能，支持：",
        "- 统一配置管理（unified_config.py）",
        "- 类型提示和协议（config_types.py）",
        "- 向后兼容的动态配置（dynamic_config.py）",
        ""
      ],
      "function": "unknown",
      "class": "unknown"
    },
    {
      "file": "anp_foundation/config/__init__.py",
      "line": 20,
      "type": "config_access",
      "config_key": "py",
      "code": "- 向后兼容的动态配置（dynamic_config.py）",
      "context": [
        "提供统一的配置管理功能，支持：",
        "- 统一配置管理（unified_config.py）",
        "- 类型提示和协议（config_types.py）",
        "- 向后兼容的动态配置（dynamic_config.py）",
        "",
        "\"\"\"",
        ""
      ],
      "function": "unknown",
      "class": "unknown"
    },
    {
      "file": "anp_foundation/config/unified_config.py",
      "line": 246,
      "type": "config_access",
      "config_key": "yaml",
      "code": "return self._app_root / \"unified_config.yaml\"",
      "context": [
        "        if config_file:",
        "            return Path(config_file).resolve()",
        "            # 默认配置文件路径基于 app_root",
        "        return self._app_root / \"unified_config.yaml\"",
        "",
        "",
        ""
      ],
      "function": "_resolve_config_file",
      "class": "UnifiedConfig"
    },
    {
      "file": "anp_foundation/config/unified_config.py",
      "line": 306,
      "type": "config_access",
      "config_key": "get",
      "code": "separator = path_config.get('path_separator')",
      "context": [
        "        if path_str.startswith('[') and path_str.endswith(']'):",
        "            path_str = os.environ.get('PATH', '')",
        "        path_config = self._config_data.get('path_config', {})",
        "        separator = path_config.get('path_separator')",
        "        if not separator:",
        "            separator = ';' if os.name == 'nt' else ':'",
        "        paths = []"
      ],
      "function": "_process_path_list",
      "class": "UnifiedConfig"
    },
    {
      "file": "anp_foundation/config/unified_config.py",
      "line": 467,
      "type": "config_access",
      "config_key": "default.yaml",
      "code": "default_config_path = self._app_root / 'unified_config.default.yaml'",
      "context": [
        "        return self._config_data.copy()",
        "",
        "    def _get_default_config(self) -> dict:",
        "        default_config_path = self._app_root / 'unified_config.default.yaml'",
        "        if not default_config_path.exists():",
        "            self.logger.warning(f\"默认配置文件 {default_config_path} 不存在。将使用空配置。\")",
        "            return {}"
      ],
      "function": "_get_default_config",
      "class": "UnifiedConfig"
    },
    {
      "file": "anp_foundation/auth/auth_verifier.py",
      "line": 209,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "                logger.debug(\"Failed to load JWT public key\")",
        "                raise HTTPException(status_code=500, detail=\"Internal anp_servicepoint error during token verification\")",
        "",
        "            config = get_global_config()",
        "            jwt_algorithm = config.anp_sdk.jwt_algorithm",
        "",
        "            # Decode and verify the token using the public key"
      ],
      "function": "_verify_bearer_token",
      "class": "unknown"
    },
    {
      "file": "anp_foundation/auth/auth_verifier.py",
      "line": 261,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    \"\"\"",
        "    from datetime import datetime, timezone, timedelta",
        "    try:",
        "        config = get_global_config()",
        "        nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
        "    except Exception:",
        "        nonce_expire_minutes = 5"
      ],
      "function": "is_valid_server_nonce",
      "class": "unknown"
    },
    {
      "file": "anp_foundation/auth/auth_verifier.py",
      "line": 283,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    logger.debug(f\"Nonce accepted and marked as used: {nonce}\")",
        "    return True",
        "async def _generate_wba_auth_response\t(did, is_two_way_auth, resp_did):",
        "    config = get_global_config()",
        "    expiration_time = config.anp_sdk.token_expire_time",
        "   # 生成访问令牌",
        "    resp_did_agent = ANPUser.from_did(resp_did)"
      ],
      "function": "_generate_wba_auth_response",
      "class": "unknown"
    },
    {
      "file": "anp_foundation/auth/auth_verifier.py",
      "line": 210,
      "type": "config_access",
      "config_key": "anp_sdk.jwt_algorithm",
      "code": "jwt_algorithm = config.anp_sdk.jwt_algorithm",
      "context": [
        "                raise HTTPException(status_code=500, detail=\"Internal anp_servicepoint error during token verification\")",
        "",
        "            config = get_global_config()",
        "            jwt_algorithm = config.anp_sdk.jwt_algorithm",
        "",
        "            # Decode and verify the token using the public key",
        "            payload = jwt.decode("
      ],
      "function": "_verify_bearer_token",
      "class": "unknown"
    },
    {
      "file": "anp_foundation/auth/auth_verifier.py",
      "line": 262,
      "type": "config_access",
      "config_key": "anp_sdk.nonce_expire_minutes",
      "code": "nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
      "context": [
        "    from datetime import datetime, timezone, timedelta",
        "    try:",
        "        config = get_global_config()",
        "        nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
        "    except Exception:",
        "        nonce_expire_minutes = 5",
        ""
      ],
      "function": "is_valid_server_nonce",
      "class": "unknown"
    },
    {
      "file": "anp_foundation/auth/auth_verifier.py",
      "line": 284,
      "type": "config_access",
      "config_key": "anp_sdk.token_expire_time",
      "code": "expiration_time = config.anp_sdk.token_expire_time",
      "context": [
        "    return True",
        "async def _generate_wba_auth_response\t(did, is_two_way_auth, resp_did):",
        "    config = get_global_config()",
        "    expiration_time = config.anp_sdk.token_expire_time",
        "   # 生成访问令牌",
        "    resp_did_agent = ANPUser.from_did(resp_did)",
        "    access_token = create_access_token("
      ],
      "function": "_generate_wba_auth_response",
      "class": "unknown"
    },
    {
      "file": "anp_foundation/utils/log_base.py",
      "line": 55,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    Args:",
        "        config: 一个符合 UnifiedConfigProtocol 协议的完整配置对象。",
        "    \"\"\"",
        "    config = get_global_config()",
        "",
        "    global _is_logging_configured",
        "    if _is_logging_configured:"
      ],
      "function": "setup_logging",
      "class": "ColoredFormatter"
    },
    {
      "file": "anp_foundation/utils/log_base.py",
      "line": 72,
      "type": "config_access",
      "config_key": "detail",
      "code": "log_file = getattr(log_config.detail, 'file', None)",
      "context": [
        "    if log_config:",
        "        log_level_str = getattr(log_config, 'log_level', 'INFO').upper()",
        "        if hasattr(log_config, 'detail'):",
        "            log_file = getattr(log_config.detail, 'file', None)",
        "            max_size_mb = getattr(log_config.detail, 'max_size', 10)",
        "",
        "    # 将字符串级别转换为 logging 的整数级别"
      ],
      "function": "setup_logging",
      "class": "ColoredFormatter"
    },
    {
      "file": "anp_foundation/utils/log_base.py",
      "line": 73,
      "type": "config_access",
      "config_key": "detail",
      "code": "max_size_mb = getattr(log_config.detail, 'max_size', 10)",
      "context": [
        "        log_level_str = getattr(log_config, 'log_level', 'INFO').upper()",
        "        if hasattr(log_config, 'detail'):",
        "            log_file = getattr(log_config.detail, 'file', None)",
        "            max_size_mb = getattr(log_config.detail, 'max_size', 10)",
        "",
        "    # 将字符串级别转换为 logging 的整数级别",
        "    log_level = getattr(logging, log_level_str, logging.INFO)"
      ],
      "function": "setup_logging",
      "class": "ColoredFormatter"
    },
    {
      "file": "anp_foundation/utils/log_base.py",
      "line": 98,
      "type": "config_access",
      "config_key": "resolve_path",
      "code": "log_file_path = config.resolve_path(log_file)",
      "context": [
        "    if log_file:",
        "        try:",
        "            # 使用 config 对象的方法来解析路径，这是最健壮的方式",
        "            log_file_path = config.resolve_path(log_file)",
        "",
        "            # 确保目录存在，不再使用 sudo",
        "            log_file_path.parent.mkdir(parents=True, exist_ok=True)"
      ],
      "function": "setup_logging",
      "class": "ColoredFormatter"
    },
    {
      "file": "anp_foundation/domain/domain_manager.py",
      "line": 35,
      "type": "get_global_config",
      "code": "self.config = get_global_config()",
      "context": [
        "    ",
        "    def __init__(self):",
        "        \"\"\"初始化域名管理器\"\"\"",
        "        self.config = get_global_config()",
        "        self._supported_domains = None",
        "        self._domain_config_cache = {}",
        "        "
      ],
      "function": "__init__",
      "class": "DomainManager"
    },
    {
      "file": "anp_foundation/domain/domain_manager.py",
      "line": 44,
      "type": "config_access",
      "config_key": "did_config.hosts",
      "code": "hosts_config = self.config.did_config.hosts",
      "context": [
        "        \"\"\"获取支持的域名列表\"\"\"",
        "        if self._supported_domains is None:",
        "            try:",
        "                hosts_config = self.config.did_config.hosts",
        "                ",
        "                # 如果是ConfigNode对象，需要转换为字典",
        "                if hasattr(hosts_config, '_data'):"
      ],
      "function": "supported_domains",
      "class": "DomainManager"
    },
    {
      "file": "anp_foundation/domain/domain_manager.py",
      "line": 48,
      "type": "config_access",
      "config_key": "_data",
      "code": "self._supported_domains = hosts_config._data",
      "context": [
        "                ",
        "                # 如果是ConfigNode对象，需要转换为字典",
        "                if hasattr(hosts_config, '_data'):",
        "                    self._supported_domains = hosts_config._data",
        "                elif hasattr(hosts_config, '__dict__'):",
        "                    # 尝试从对象属性构建字典",
        "                    self._supported_domains = {}"
      ],
      "function": "supported_domains",
      "class": "DomainManager"
    },
    {
      "file": "anp_foundation/domain/domain_manager.py",
      "line": 66,
      "type": "config_access",
      "config_key": "hosts",
      "code": "logger.warning(\"配置中未找到did_config.hosts，使用默认域名配置\")",
      "context": [
        "                    ",
        "            except AttributeError:",
        "                # 如果配置中没有did_config，使用默认值",
        "                logger.warning(\"配置中未找到did_config.hosts，使用默认域名配置\")",
        "                self._supported_domains = {",
        "                    \"localhost\": 9527,",
        "                    \"user.localhost\": 9527,"
      ],
      "function": "supported_domains",
      "class": "DomainManager"
    },
    {
      "file": "anp_foundation/domain/domain_manager.py",
      "line": 121,
      "type": "config_access",
      "config_key": "did_config.parsing.default_host",
      "code": "default_host = self.config.did_config.parsing.default_host",
      "context": [
        "    def _get_default_host_port(self) -> Tuple[str, int]:",
        "        \"\"\"获取默认的主机和端口\"\"\"",
        "        try:",
        "            default_host = self.config.did_config.parsing.default_host",
        "            default_port = self.config.did_config.parsing.default_port",
        "            return default_host, default_port",
        "        except AttributeError:"
      ],
      "function": "_get_default_host_port",
      "class": "DomainManager"
    },
    {
      "file": "anp_foundation/domain/domain_manager.py",
      "line": 122,
      "type": "config_access",
      "config_key": "did_config.parsing.default_port",
      "code": "default_port = self.config.did_config.parsing.default_port",
      "context": [
        "        \"\"\"获取默认的主机和端口\"\"\"",
        "        try:",
        "            default_host = self.config.did_config.parsing.default_host",
        "            default_port = self.config.did_config.parsing.default_port",
        "            return default_host, default_port",
        "        except AttributeError:",
        "            return \"localhost\", 9527"
      ],
      "function": "_get_default_host_port",
      "class": "DomainManager"
    },
    {
      "file": "anp_foundation/domain/domain_manager.py",
      "line": 211,
      "type": "config_access",
      "config_key": "unified_config",
      "code": "from anp_foundation.config.unified_config import UnifiedConfig",
      "context": [
        "        \"\"\"",
        "        try:",
        "            # 使用UnifiedConfig的标准路径解析功能",
        "            from anp_foundation.config.unified_config import UnifiedConfig",
        "            ",
        "            # 构建相对于APP_ROOT的数据路径",
        "            data_path_template = f\"{{APP_ROOT}}/{self.get_data_path_for_domain(domain, port)}\""
      ],
      "function": "get_all_data_paths",
      "class": "DomainManager"
    },
    {
      "file": "anp_foundation/domain/domain_manager.py",
      "line": 321,
      "type": "config_access",
      "config_key": "did_config.insecure_patterns",
      "code": "insecure_patterns = self.config.did_config.insecure_patterns",
      "context": [
        "        ",
        "        # 检查是否是不安全的域名（仅在非生产环境允许）",
        "        try:",
        "            insecure_patterns = self.config.did_config.insecure_patterns",
        "            allow_insecure = self.config.did_config.parsing.allow_insecure",
        "            ",
        "            if not allow_insecure:"
      ],
      "function": "validate_domain_access",
      "class": "DomainManager"
    },
    {
      "file": "anp_foundation/domain/domain_manager.py",
      "line": 322,
      "type": "config_access",
      "config_key": "did_config.parsing.allow_insecure",
      "code": "allow_insecure = self.config.did_config.parsing.allow_insecure",
      "context": [
        "        # 检查是否是不安全的域名（仅在非生产环境允许）",
        "        try:",
        "            insecure_patterns = self.config.did_config.insecure_patterns",
        "            allow_insecure = self.config.did_config.parsing.allow_insecure",
        "            ",
        "            if not allow_insecure:",
        "                for pattern in insecure_patterns:"
      ],
      "function": "validate_domain_access",
      "class": "DomainManager"
    }
  ],
  "dependency_injection_analysis": {
    "total_usages": 80,
    "files_count": 15,
    "config_keys_used": [
      "_data",
      "anp_sdk",
      "anp_sdk.debug_mode",
      "anp_sdk.host",
      "anp_sdk.jwt_algorithm",
      "anp_sdk.nonce_expire_minutes",
      "anp_sdk.port",
      "anp_sdk.token_expire_time",
      "anp_sdk.user_did_key_id",
      "anp_sdk.user_did_path",
      "anp_sdk.user_hosted_path",
      "auth_middleware.exempt_paths",
      "default.yaml",
      "detail",
      "did_config.creatable_user_types",
      "did_config.format_template",
      "did_config.hosts",
      "did_config.insecure_patterns",
      "did_config.method",
      "did_config.parsing.allow_insecure",
      "did_config.parsing.default_host",
      "did_config.parsing.default_port",
      "did_config.user_types",
      "get",
      "hosts",
      "py",
      "resolve_path",
      "unified_config",
      "yaml"
    ],
    "injection_opportunities": [
      {
        "file": "anp_runtime/agent_manager.py",
        "type": "class_constructor_injection",
        "classes": [
          "AgentRouter",
          "LocalAgentManager"
        ],
        "usage_count": 8,
        "suggestion": "为 AgentRouter, LocalAgentManager 类添加 config 参数到构造函数"
      },
      {
        "file": "anp_runtime/agent_manager.py",
        "type": "function_parameter_injection",
        "functions": [
          "load_agent_from_module",
          "_resolve_shared_did",
          "_register_message_handlers_new"
        ],
        "usage_count": 8,
        "suggestion": "为 load_agent_from_module, _resolve_shared_did, _register_message_handlers_new 函数添加 config 参数"
      },
      {
        "file": "anp_server/run_lite_server_template.py",
        "type": "class_constructor_injection",
        "classes": [
          "ANP_Server"
        ],
        "usage_count": 5,
        "suggestion": "为 ANP_Server 类添加 config 参数到构造函数"
      },
      {
        "file": "anp_server/run_lite_server_template.py",
        "type": "function_parameter_injection",
        "functions": [
          "__init__",
          "start_server"
        ],
        "usage_count": 5,
        "suggestion": "为 __init__, start_server 函数添加 config 参数"
      },
      {
        "file": "anp_server/baseline/anp_server_baseline.py",
        "type": "class_constructor_injection",
        "classes": [
          "ANP_Server"
        ],
        "usage_count": 5,
        "suggestion": "为 ANP_Server 类添加 config 参数到构造函数"
      },
      {
        "file": "anp_server/baseline/anp_server_baseline.py",
        "type": "function_parameter_injection",
        "functions": [
          "__init__",
          "start_server"
        ],
        "usage_count": 5,
        "suggestion": "为 __init__, start_server 函数添加 config 参数"
      },
      {
        "file": "anp_servicepoint/extend_service_implementation/did_host/did_host_manager.py",
        "type": "class_constructor_injection",
        "classes": [
          "DIDHostManager"
        ],
        "usage_count": 2,
        "suggestion": "为 DIDHostManager 类添加 config 参数到构造函数"
      },
      {
        "file": "anp_servicepoint/extend_service_implementation/did_host/did_host_manager.py",
        "type": "function_parameter_injection",
        "functions": [
          "__init__"
        ],
        "usage_count": 2,
        "suggestion": "为 __init__ 函数添加 config 参数"
      },
      {
        "file": "anp_servicepoint/core_service_handler/agent_service_handler.py",
        "type": "function_parameter_injection",
        "functions": [
          "process_group_request",
          "process_agent_message",
          "process_agent_api_request"
        ],
        "usage_count": 15,
        "suggestion": "为 process_group_request, process_agent_message, process_agent_api_request 函数添加 config 参数"
      },
      {
        "file": "anp_foundation/anp_user_local_data.py",
        "type": "class_constructor_injection",
        "classes": [
          "LocalUserDataManager"
        ],
        "usage_count": 6,
        "suggestion": "为 LocalUserDataManager 类添加 config 参数到构造函数"
      },
      {
        "file": "anp_foundation/anp_user_local_data.py",
        "type": "function_parameter_injection",
        "functions": [
          "load_all_users",
          "load_single_user",
          "create_did_user",
          "__init__"
        ],
        "usage_count": 6,
        "suggestion": "为 load_all_users, load_single_user, create_did_user, __init__ 函数添加 config 参数"
      },
      {
        "file": "anp_foundation/anp_user.py",
        "type": "class_constructor_injection",
        "classes": [
          "ANPUser"
        ],
        "usage_count": 2,
        "suggestion": "为 ANPUser 类添加 config 参数到构造函数"
      },
      {
        "file": "anp_foundation/anp_user.py",
        "type": "function_parameter_injection",
        "functions": [
          "__init__"
        ],
        "usage_count": 2,
        "suggestion": "为 __init__ 函数添加 config 参数"
      },
      {
        "file": "anp_foundation/did/did_tool.py",
        "type": "class_constructor_injection",
        "classes": [
          "AuthenticationContext"
        ],
        "usage_count": 5,
        "suggestion": "为 AuthenticationContext 类添加 config 参数到构造函数"
      },
      {
        "file": "anp_foundation/did/did_tool.py",
        "type": "function_parameter_injection",
        "functions": [
          "create_access_token",
          "verify_timestamp"
        ],
        "usage_count": 5,
        "suggestion": "为 create_access_token, verify_timestamp 函数添加 config 参数"
      },
      {
        "file": "anp_foundation/did/did_format_manager.py",
        "type": "class_constructor_injection",
        "classes": [
          "DidFormatManager"
        ],
        "usage_count": 6,
        "suggestion": "为 DidFormatManager 类添加 config 参数到构造函数"
      },
      {
        "file": "anp_foundation/did/did_format_manager.py",
        "type": "function_parameter_injection",
        "functions": [
          "_get_format_template",
          "get_creatable_user_types",
          "_get_method",
          "__init__",
          "get_supported_user_types",
          "can_create_user_type"
        ],
        "usage_count": 6,
        "suggestion": "为 _get_format_template, get_creatable_user_types, _get_method, __init__, get_supported_user_types, can_create_user_type 函数添加 config 参数"
      },
      {
        "file": "anp_foundation/config/unified_config.py",
        "type": "class_constructor_injection",
        "classes": [
          "UnifiedConfig"
        ],
        "usage_count": 3,
        "suggestion": "为 UnifiedConfig 类添加 config 参数到构造函数"
      },
      {
        "file": "anp_foundation/config/unified_config.py",
        "type": "function_parameter_injection",
        "functions": [
          "_process_path_list",
          "_get_default_config",
          "_resolve_config_file"
        ],
        "usage_count": 3,
        "suggestion": "为 _process_path_list, _get_default_config, _resolve_config_file 函数添加 config 参数"
      },
      {
        "file": "anp_foundation/auth/auth_verifier.py",
        "type": "function_parameter_injection",
        "functions": [
          "_verify_bearer_token",
          "is_valid_server_nonce",
          "_generate_wba_auth_response"
        ],
        "usage_count": 6,
        "suggestion": "为 _verify_bearer_token, is_valid_server_nonce, _generate_wba_auth_response 函数添加 config 参数"
      },
      {
        "file": "anp_foundation/utils/log_base.py",
        "type": "class_constructor_injection",
        "classes": [
          "ColoredFormatter"
        ],
        "usage_count": 4,
        "suggestion": "为 ColoredFormatter 类添加 config 参数到构造函数"
      },
      {
        "file": "anp_foundation/utils/log_base.py",
        "type": "function_parameter_injection",
        "functions": [
          "setup_logging"
        ],
        "usage_count": 4,
        "suggestion": "为 setup_logging 函数添加 config 参数"
      },
      {
        "file": "anp_foundation/domain/domain_manager.py",
        "type": "class_constructor_injection",
        "classes": [
          "DomainManager"
        ],
        "usage_count": 9,
        "suggestion": "为 DomainManager 类添加 config 参数到构造函数"
      },
      {
        "file": "anp_foundation/domain/domain_manager.py",
        "type": "function_parameter_injection",
        "functions": [
          "get_all_data_paths",
          "validate_domain_access",
          "_get_default_host_port",
          "__init__",
          "supported_domains"
        ],
        "usage_count": 9,
        "suggestion": "为 get_all_data_paths, validate_domain_access, _get_default_host_port, __init__, supported_domains 函数添加 config 参数"
      }
    ],
    "refactor_suggestions": []
  },
  "config_usage_patterns": {
    "used_sections": {
      "anp_sdk": 