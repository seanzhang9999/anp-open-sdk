{
  "summary": {
    "total_config_usages": 167,
    "files_with_config": 23,
    "unique_config_keys": 40,
    "analysis_timestamp": "/Users/seanzhang/seanrework/anp-open-sdk",
    "excluded_files": [
      "search_config_usage.py",
      "search_*.py"
    ]
  },
  "detailed_usages": [
    {
      "file": "data_user/localhost_9527/agents_config/agent_llm/agent_handlers.py",
      "line": 34,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    print(f\"  -> Self-created agent instance: {my_agent_instance.name}\")",
        "",
        "    # 3. 创建并存储LLM客户端作为模块级变量",
        "    config = get_global_config()",
        "    api_key = config.secrets.openai_api_key",
        "    base_url = config.llm.api_url",
        ""
      ],
      "function": "initialize_agent",
      "class": "unknown",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "data_user/localhost_9527/agents_config/agent_llm/agent_handlers.py",
      "line": 34,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    print(f\"  -> Self-created agent instance: {my_agent_instance.name}\")",
        "",
        "    # 3. 创建并存储LLM客户端作为模块级变量",
        "    config = get_global_config()",
        "    api_key = config.secrets.openai_api_key",
        "    base_url = config.llm.api_url",
        ""
      ],
      "function": "initialize_agent",
      "class": "unknown",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "data_user/localhost_9527/agents_config/agent_llm/agent_handlers.py",
      "line": 5,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "import yaml",
        "from openai import AsyncOpenAI",
        "from anp_foundation.anp_user import ANPUser",
        "from anp_foundation.config import get_global_config",
        "",
        "# --- 模块级变量，代表这个Agent实例的状态 ---",
        "# 这些变量在模块被加载时创建，并贯穿整个应用的生命周期"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "data_user/localhost_9527/agents_config/agent_llm/agent_handlers.py",
      "line": 5,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "import yaml",
        "from openai import AsyncOpenAI",
        "from anp_foundation.anp_user import ANPUser",
        "from anp_foundation.config import get_global_config",
        "",
        "# --- 模块级变量，代表这个Agent实例的状态 ---",
        "# 这些变量在模块被加载时创建，并贯穿整个应用的生命周期"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "data_user/localhost_9527/agents_config/agent_llm/agent_handlers.py",
      "line": 35,
      "type": "config_attribute_access",
      "config_key": "secrets.openai_api_key",
      "code": "api_key = config.secrets.openai_api_key",
      "context": [
        "",
        "    # 3. 创建并存储LLM客户端作为模块级变量",
        "    config = get_global_config()",
        "    api_key = config.secrets.openai_api_key",
        "    base_url = config.llm.api_url",
        "",
        "    my_llm_client = AsyncOpenAI(api_key=api_key, base_url=base_url)"
      ],
      "function": "initialize_agent",
      "class": "unknown",
      "full_match": "config.secrets.openai_api_key"
    },
    {
      "file": "data_user/localhost_9527/agents_config/agent_llm/agent_handlers.py",
      "line": 36,
      "type": "config_attribute_access",
      "config_key": "llm.api_url",
      "code": "base_url = config.llm.api_url",
      "context": [
        "    # 3. 创建并存储LLM客户端作为模块级变量",
        "    config = get_global_config()",
        "    api_key = config.secrets.openai_api_key",
        "    base_url = config.llm.api_url",
        "",
        "    my_llm_client = AsyncOpenAI(api_key=api_key, base_url=base_url)",
        "    print(f\"  -> Self-created LLM client.\")"
      ],
      "function": "initialize_agent",
      "class": "unknown",
      "full_match": "config.llm.api_url"
    },
    {
      "file": "data_user/localhost_9527/agents_config/orchestrator_agent/agent_handlers.py",
      "line": 251,
      "type": "config_attribute_access",
      "config_key": "agent_002.agent_register",
      "code": "\"data_user.localhost_9527.agents_config.agent_002.agent_register::calculate_sum\",",
      "context": [
        "",
        "        # 方式2：通过方法键直接调用",
        "        result2 = await caller.call_method_by_key(",
        "            \"data_user.localhost_9527.agents_config.agent_002.agent_register::calculate_sum\",",
        "            10.5, 20.3",
        "        )",
        "        logger.info(f\"直接调用结果: {result2}\")"
      ],
      "function": "run_agent_002_demo_new",
      "class": "unknown",
      "full_match": "config.agent_002.agent_register"
    },
    {
      "file": "anp-open-sdk-python/anp_runtime/agent_manager.py",
      "line": 583,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "path_mappings = config.get('path_mappings', {})",
      "context": [
        "            return None, None",
        "",
        "        config = self.shared_did_registry[shared_did]",
        "        path_mappings = config.get('path_mappings', {})",
        "",
        "        # 精确匹配",
        "        if api_path in path_mappings:"
      ],
      "function": "_resolve_shared_did",
      "class": "AgentRouter",
      "full_match": "config.get"
    },
    {
      "file": "anp-open-sdk-python/anp_runtime/agent_manager.py",
      "line": 847,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "if share_config.get('enabled'):",
      "context": [
        "        # 检查共享DID配置",
        "        share_did_config = None",
        "        share_config = cfg.get('share_did', {})",
        "        if share_config.get('enabled'):",
        "            share_did_config = {",
        "                'shared_did': share_config['shared_did'],",
        "                'path_prefix': share_config.get('path_prefix', ''),"
      ],
      "function": "load_agent_from_module",
      "class": "LocalAgentManager",
      "full_match": "config.get"
    },
    {
      "file": "anp-open-sdk-python/anp_runtime/agent_manager.py",
      "line": 850,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "'path_prefix': share_config.get('path_prefix', ''),",
      "context": [
        "        if share_config.get('enabled'):",
        "            share_did_config = {",
        "                'shared_did': share_config['shared_did'],",
        "                'path_prefix': share_config.get('path_prefix', ''),",
        "                'primary_agent': share_config.get('primary_agent', False),  # 默认为副Agent",
        "                'api_paths': [api['path'] for api in cfg.get('api', [])]",
        "            }"
      ],
      "function": "load_agent_from_module",
      "class": "LocalAgentManager",
      "full_match": "config.get"
    },
    {
      "file": "anp-open-sdk-python/anp_runtime/agent_manager.py",
      "line": 851,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "'primary_agent': share_config.get('primary_agent', False),  # 默认为副Agent",
      "context": [
        "            share_did_config = {",
        "                'shared_did': share_config['shared_did'],",
        "                'path_prefix': share_config.get('path_prefix', ''),",
        "                'primary_agent': share_config.get('primary_agent', False),  # 默认为副Agent",
        "                'api_paths': [api['path'] for api in cfg.get('api', [])]",
        "            }",
        "            logger.debug(f\"  -> 检测到共享DID配置: {share_did_config}\")"
      ],
      "function": "load_agent_from_module",
      "class": "LocalAgentManager",
      "full_match": "config.get"
    },
    {
      "file": "anp-open-sdk-python/anp_runtime/agent_manager.py",
      "line": 874,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "if not share_did_config.get('path_prefix'):",
      "context": [
        "        # 创建新的Agent实例 - 全面使用新Agent系统",
        "        if share_did_config:",
        "            # 确保共享DID配置完整",
        "            if not share_did_config.get('path_prefix'):",
        "                raise ValueError(f\"❌ 共享DID配置缺少 path_prefix: {base_module_name}\")",
        "",
        "            anp_agent = AgentManager.create_agent("
      ],
      "function": "load_agent_from_module",
      "class": "LocalAgentManager",
      "full_match": "config.get"
    },
    {
      "file": "anp-open-sdk-python/anp_runtime/agent_manager.py",
      "line": 880,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "prefix=share_did_config.get('path_prefix', ''),",
      "context": [
        "            anp_agent = AgentManager.create_agent(",
        "                anp_user_did,  cfg['name'],",
        "                shared=True,",
        "                prefix=share_did_config.get('path_prefix', ''),",
        "                primary_agent=share_did_config.get('primary_agent', False)",
        "            )",
        "        else:"
      ],
      "function": "load_agent_from_module",
      "class": "LocalAgentManager",
      "full_match": "config.get"
    },
    {
      "file": "anp-open-sdk-python/anp_runtime/agent_manager.py",
      "line": 881,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "primary_agent=share_did_config.get('primary_agent', False)",
      "context": [
        "                anp_user_did,  cfg['name'],",
        "                shared=True,",
        "                prefix=share_did_config.get('path_prefix', ''),",
        "                primary_agent=share_did_config.get('primary_agent', False)",
        "            )",
        "        else:",
        "            anp_agent = AgentManager.create_agent(anp_user_did, cfg['name'], shared=False)"
      ],
      "function": "load_agent_from_module",
      "class": "LocalAgentManager",
      "full_match": "config.get"
    },
    {
      "file": "anp-open-sdk-python/anp_runtime/agent_manager.py",
      "line": 937,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "is_primary = share_did_config.get('primary_agent', False)",
      "context": [
        "        # 检查是否是共享DID模式但不是主Agent",
        "        is_shared_non_primary = False",
        "        if share_did_config:  # 只检查share_did_config是否存在",
        "            is_primary = share_did_config.get('primary_agent', False)",
        "            if not is_primary:",
        "                is_shared_non_primary = True",
        "                logger.info(f\"ℹ️ 注意: {cfg.get('name')} 是共享DID的非主Agent，将跳过消息处理器注册 (这是预期行为)\")"
      ],
      "function": "_register_message_handlers_new",
      "class": "LocalAgentManager",
      "full_match": "config.get"
    },
    {
      "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
      "line": 61,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "",
        "        self.logger = logger",
        "        self.initialized = True",
        "        config = get_global_config()",
        "        self.debug_mode = config.anp_sdk.debug_mode",
        "        if self.debug_mode:",
        "            self.app = FastAPI("
      ],
      "function": "__init__",
      "class": "ANP_Server",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
      "line": 117,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        from anp_foundation.config import get_global_config",
        "",
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host",
        ""
      ],
      "function": "start_server",
      "class": "ANP_Server",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
      "line": 61,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "",
        "        self.logger = logger",
        "        self.initialized = True",
        "        config = get_global_config()",
        "        self.debug_mode = config.anp_sdk.debug_mode",
        "        if self.debug_mode:",
        "            self.app = FastAPI("
      ],
      "function": "__init__",
      "class": "ANP_Server",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
      "line": 117,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        from anp_foundation.config import get_global_config",
        "",
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host",
        ""
      ],
      "function": "start_server",
      "class": "ANP_Server",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
      "line": 18,
      "type": "get_global_config",
      "code": "from anp_foundation.config import UnifiedConfig, set_global_config, get_global_config",
      "context": [
        "# 在模块顶部获取 logger，这是标准做法",
        "import logging",
        "import os",
        "from anp_foundation.config import UnifiedConfig, set_global_config, get_global_config",
        "from anp_foundation.utils.log_base import setup_logging",
        "app_config = UnifiedConfig(config_file='unified_config_framework_demo.yaml')",
        "set_global_config(app_config)"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
      "line": 114,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "            self.logger.debug(\"检测到Mac环境，使用特殊启动方式\")",
        "        import uvicorn",
        "        import threading",
        "        from anp_foundation.config import get_global_config",
        "",
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()"
      ],
      "function": "start_server",
      "class": "ANP_Server",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
      "line": 18,
      "type": "get_global_config",
      "code": "from anp_foundation.config import UnifiedConfig, set_global_config, get_global_config",
      "context": [
        "# 在模块顶部获取 logger，这是标准做法",
        "import logging",
        "import os",
        "from anp_foundation.config import UnifiedConfig, set_global_config, get_global_config",
        "from anp_foundation.utils.log_base import setup_logging",
        "app_config = UnifiedConfig(config_file='unified_config_framework_demo.yaml')",
        "set_global_config(app_config)"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
      "line": 114,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "            self.logger.debug(\"检测到Mac环境，使用特殊启动方式\")",
        "        import uvicorn",
        "        import threading",
        "        from anp_foundation.config import get_global_config",
        "",
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()"
      ],
      "function": "start_server",
      "class": "ANP_Server",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
      "line": 62,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.debug_mode",
      "code": "self.debug_mode = config.anp_sdk.debug_mode",
      "context": [
        "        self.logger = logger",
        "        self.initialized = True",
        "        config = get_global_config()",
        "        self.debug_mode = config.anp_sdk.debug_mode",
        "        if self.debug_mode:",
        "            self.app = FastAPI(",
        "                title=\"ANP DID Server in DebugMode\","
      ],
      "function": "__init__",
      "class": "ANP_Server",
      "full_match": "config.anp_sdk.debug_mode"
    },
    {
      "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
      "line": 118,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.port",
      "code": "port = config.anp_sdk.port",
      "context": [
        "",
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host",
        "",
        "        app_instance = self.app"
      ],
      "function": "start_server",
      "class": "ANP_Server",
      "full_match": "config.anp_sdk.port"
    },
    {
      "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
      "line": 119,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.host",
      "code": "host = config.anp_sdk.host",
      "context": [
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host",
        "",
        "        app_instance = self.app",
        ""
      ],
      "function": "start_server",
      "class": "ANP_Server",
      "full_match": "config.anp_sdk.host"
    },
    {
      "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
      "line": 56,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "",
        "        self.logger = logger",
        "        self.initialized = True",
        "        config = get_global_config()",
        "        self.debug_mode = config.anp_sdk.debug_mode",
        "",
        ""
      ],
      "function": "__init__",
      "class": "ANP_Server",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
      "line": 116,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        from anp_foundation.config import get_global_config",
        "",
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()",
        "",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host"
      ],
      "function": "start_server",
      "class": "ANP_Server",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
      "line": 56,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "",
        "        self.logger = logger",
        "        self.initialized = True",
        "        config = get_global_config()",
        "        self.debug_mode = config.anp_sdk.debug_mode",
        "",
        ""
      ],
      "function": "__init__",
      "class": "ANP_Server",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
      "line": 116,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        from anp_foundation.config import get_global_config",
        "",
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()",
        "",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host"
      ],
      "function": "start_server",
      "class": "ANP_Server",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
      "line": 22,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "from fastapi import FastAPI",
        "from fastapi.middleware.cors import CORSMiddleware",
        "",
        "from anp_foundation.config import get_global_config",
        "from anp_server.baseline.anp_middleware_baseline.anp_auth_middleware import auth_middleware",
        "from anp_server.baseline.anp_router_baseline import router_did",
        "from anp_server.baseline.anp_router_baseline import router_publisher, router_agent"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
      "line": 113,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "            self.logger.debug(\"检测到Mac环境，使用特殊启动方式\")",
        "        import uvicorn",
        "        import threading",
        "        from anp_foundation.config import get_global_config",
        "",
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()"
      ],
      "function": "start_server",
      "class": "ANP_Server",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
      "line": 22,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "from fastapi import FastAPI",
        "from fastapi.middleware.cors import CORSMiddleware",
        "",
        "from anp_foundation.config import get_global_config",
        "from anp_server.baseline.anp_middleware_baseline.anp_auth_middleware import auth_middleware",
        "from anp_server.baseline.anp_router_baseline import router_did",
        "from anp_server.baseline.anp_router_baseline import router_publisher, router_agent"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
      "line": 113,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "            self.logger.debug(\"检测到Mac环境，使用特殊启动方式\")",
        "        import uvicorn",
        "        import threading",
        "        from anp_foundation.config import get_global_config",
        "",
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()"
      ],
      "function": "start_server",
      "class": "ANP_Server",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
      "line": 57,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.debug_mode",
      "code": "self.debug_mode = config.anp_sdk.debug_mode",
      "context": [
        "        self.logger = logger",
        "        self.initialized = True",
        "        config = get_global_config()",
        "        self.debug_mode = config.anp_sdk.debug_mode",
        "",
        "",
        "        if self.debug_mode:"
      ],
      "function": "__init__",
      "class": "ANP_Server",
      "full_match": "config.anp_sdk.debug_mode"
    },
    {
      "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
      "line": 118,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.port",
      "code": "port = config.anp_sdk.port",
      "context": [
        "        # 2. 修正配置项的名称",
        "        config = get_global_config()",
        "",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host",
        "",
        "        app_instance = self.app"
      ],
      "function": "start_server",
      "class": "ANP_Server",
      "full_match": "config.anp_sdk.port"
    },
    {
      "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
      "line": 119,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.host",
      "code": "host = config.anp_sdk.host",
      "context": [
        "        config = get_global_config()",
        "",
        "        port = config.anp_sdk.port",
        "        host = config.anp_sdk.host",
        "",
        "        app_instance = self.app",
        ""
      ],
      "function": "start_server",
      "class": "ANP_Server",
      "full_match": "config.anp_sdk.host"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/auth_exempt_handler.py",
      "line": 5,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "",
        "from anp_foundation.config import get_global_config",
        "",
        "config = get_global_config()",
        "EXEMPT_PATHS = config.auth_middleware.exempt_paths",
        "",
        ""
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/auth_exempt_handler.py",
      "line": 5,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "",
        "from anp_foundation.config import get_global_config",
        "",
        "config = get_global_config()",
        "EXEMPT_PATHS = config.auth_middleware.exempt_paths",
        "",
        ""
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/auth_exempt_handler.py",
      "line": 3,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "import fnmatch",
        "",
        "from anp_foundation.config import get_global_config",
        "",
        "config = get_global_config()",
        "EXEMPT_PATHS = config.auth_middleware.exempt_paths"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/auth_exempt_handler.py",
      "line": 3,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "import fnmatch",
        "",
        "from anp_foundation.config import get_global_config",
        "",
        "config = get_global_config()",
        "EXEMPT_PATHS = config.auth_middleware.exempt_paths"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/auth_exempt_handler.py",
      "line": 6,
      "type": "config_attribute_access",
      "config_key": "auth_middleware.exempt_paths",
      "code": "EXEMPT_PATHS = config.auth_middleware.exempt_paths",
      "context": [
        "from anp_foundation.config import get_global_config",
        "",
        "config = get_global_config()",
        "EXEMPT_PATHS = config.auth_middleware.exempt_paths",
        "",
        "",
        "def is_exempt(path):"
      ],
      "function": "unknown",
      "class": "unknown",
      "full_match": "config.auth_middleware.exempt_paths"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/extend_service_implementation/did_host/did_host_manager.py",
      "line": 35,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "            self.hostport = str(port)",
        "        else:",
        "            # 兼容模式：使用现有逻辑",
        "            config = get_global_config()",
        "            self.hosted_dir = Path(hosted_dir or config.anp_sdk.user_hosted_path)",
        "            self.hostdomain = os.environ.get('HOST_DID_DOMAIN', 'localhost')",
        "            self.hostport = os.environ.get('HOST_DID_PORT', '9527')"
      ],
      "function": "__init__",
      "class": "DIDHostManager",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/extend_service_implementation/did_host/did_host_manager.py",
      "line": 35,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "            self.hostport = str(port)",
        "        else:",
        "            # 兼容模式：使用现有逻辑",
        "            config = get_global_config()",
        "            self.hosted_dir = Path(hosted_dir or config.anp_sdk.user_hosted_path)",
        "            self.hostdomain = os.environ.get('HOST_DID_DOMAIN', 'localhost')",
        "            self.hostport = os.environ.get('HOST_DID_PORT', '9527')"
      ],
      "function": "__init__",
      "class": "DIDHostManager",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/extend_service_implementation/did_host/did_host_manager.py",
      "line": 8,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "from pathlib import Path",
        "from typing import Optional",
        "",
        "from anp_foundation.config import get_global_config",
        "",
        "import logging",
        "logger = logging.getLogger(__name__)"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/extend_service_implementation/did_host/did_host_manager.py",
      "line": 8,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "from pathlib import Path",
        "from typing import Optional",
        "",
        "from anp_foundation.config import get_global_config",
        "",
        "import logging",
        "logger = logging.getLogger(__name__)"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/extend_service_implementation/did_host/did_host_manager.py",
      "line": 36,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.user_hosted_path",
      "code": "self.hosted_dir = Path(hosted_dir or config.anp_sdk.user_hosted_path)",
      "context": [
        "        else:",
        "            # 兼容模式：使用现有逻辑",
        "            config = get_global_config()",
        "            self.hosted_dir = Path(hosted_dir or config.anp_sdk.user_hosted_path)",
        "            self.hostdomain = os.environ.get('HOST_DID_DOMAIN', 'localhost')",
        "            self.hostport = os.environ.get('HOST_DID_PORT', '9527')",
        "            "
      ],
      "function": "__init__",
      "class": "DIDHostManager",
      "full_match": "config.anp_sdk.user_hosted_path"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 32,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        Dict[str, Any]: 处理结果",
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        ""
      ],
      "function": "process_group_request",
      "class": "unknown",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 100,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        Dict[str, Any]: 处理结果",
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        ""
      ],
      "function": "process_agent_api_request",
      "class": "unknown",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 200,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        Dict[str, Any]: 处理结果",
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        ""
      ],
      "function": "process_agent_message",
      "class": "unknown",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 32,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        Dict[str, Any]: 处理结果",
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        ""
      ],
      "function": "process_group_request",
      "class": "unknown",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 100,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        Dict[str, Any]: 处理结果",
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        ""
      ],
      "function": "process_agent_api_request",
      "class": "unknown",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 200,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        Dict[str, Any]: 处理结果",
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        ""
      ],
      "function": "process_agent_message",
      "class": "unknown",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 12,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "logger = logging.getLogger(__name__)",
        "",
        "# 导入必要的依赖",
        "from anp_foundation.config import get_global_config",
        "from anp_runtime.global_router_agent_message import GlobalMessageManager, GlobalGroupManager",
        "",
        ""
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 12,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "logger = logging.getLogger(__name__)",
        "",
        "# 导入必要的依赖",
        "from anp_foundation.config import get_global_config",
        "from anp_runtime.global_router_agent_message import GlobalMessageManager, GlobalGroupManager",
        "",
        ""
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 33,
      "type": "config_attribute_access",
      "config_key": "anp_sdk",
      "code": "use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
      "context": [
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        "",
        "    # 根据配置决定处理方式"
      ],
      "function": "process_group_request",
      "class": "unknown",
      "full_match": "config.anp_sdk"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 34,
      "type": "config_attribute_access",
      "config_key": "anp_sdk",
      "code": "transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
      "context": [
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        "",
        "    # 根据配置决定处理方式",
        "    if use_transformer_server:"
      ],
      "function": "process_group_request",
      "class": "unknown",
      "full_match": "config.anp_sdk"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 67,
      "type": "config_attribute_access",
      "config_key": "anp_sdk",
      "code": "if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
      "context": [
        "                    else:",
        "                        error_text = await response.text()",
        "                        logger.error(f\"❌ Framework server返回错误: {response.status} - {error_text}\")",
        "                        if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
        "                            return {\"status\": \"error\", \"message\": f\"Framework server错误: {response.status}\"}",
        "        except Exception as e:",
        "            logger.error(f\"❌ 转发到Framework server失败: {e}\")"
      ],
      "function": "process_group_request",
      "class": "unknown",
      "full_match": "config.anp_sdk"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 71,
      "type": "config_attribute_access",
      "config_key": "anp_sdk",
      "code": "if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
      "context": [
        "                            return {\"status\": \"error\", \"message\": f\"Framework server错误: {response.status}\"}",
        "        except Exception as e:",
        "            logger.error(f\"❌ 转发到Framework server失败: {e}\")",
        "            if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
        "                return {\"status\": \"error\", \"message\": f\"Framework server连接失败: {str(e)}\"}",
        "",
        "    # 本地处理"
      ],
      "function": "process_group_request",
      "class": "unknown",
      "full_match": "config.anp_sdk"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 101,
      "type": "config_attribute_access",
      "config_key": "anp_sdk",
      "code": "use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
      "context": [
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        "",
        "    # 构造请求数据"
      ],
      "function": "process_agent_api_request",
      "class": "unknown",
      "full_match": "config.anp_sdk"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 102,
      "type": "config_attribute_access",
      "config_key": "anp_sdk",
      "code": "transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
      "context": [
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        "",
        "    # 构造请求数据",
        "    processed_data = {"
      ],
      "function": "process_agent_api_request",
      "class": "unknown",
      "full_match": "config.anp_sdk"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 151,
      "type": "config_attribute_access",
      "config_key": "anp_sdk",
      "code": "if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
      "context": [
        "                        error_text = await response.text()",
        "                        logger.error(f\"❌ transformer server返回错误: {response.status} - {error_text}\")",
        "                        # 失败时回退到本地处理",
        "                        if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
        "                            return {\"status\": \"error\", \"message\": f\"transformer server错误: {response.status}\",",
        "                                    \"details\": error_text}",
        "        except Exception as e:"
      ],
      "function": "process_agent_api_request",
      "class": "unknown",
      "full_match": "config.anp_sdk"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 157,
      "type": "config_attribute_access",
      "config_key": "anp_sdk",
      "code": "if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"❌ transformer server失败: {e}\")",
        "            # 失败时回退到本地处理",
        "            if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
        "                return {\"status\": \"error\", \"message\": f\"transformer server连接失败: {str(e)}\"}",
        "            logger.debug(\"⚠️ 回退到本地处理\")",
        ""
      ],
      "function": "process_agent_api_request",
      "class": "unknown",
      "full_match": "config.anp_sdk"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 201,
      "type": "config_attribute_access",
      "config_key": "anp_sdk",
      "code": "use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
      "context": [
        "    \"\"\"",
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        "",
        "    # 构造请求数据"
      ],
      "function": "process_agent_message",
      "class": "unknown",
      "full_match": "config.anp_sdk"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 202,
      "type": "config_attribute_access",
      "config_key": "anp_sdk",
      "code": "transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
      "context": [
        "    # 获取配置",
        "    config = get_global_config()",
        "    use_transformer_server = getattr(config.anp_sdk, \"use_transformer_server\", False)",
        "    transformer_server_url = getattr(config.anp_sdk, \"transformer_server_url\", \"http://localhost:9528\")",
        "",
        "    # 构造请求数据",
        "    processed_data = {"
      ],
      "function": "process_agent_message",
      "class": "unknown",
      "full_match": "config.anp_sdk"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 250,
      "type": "config_attribute_access",
      "config_key": "anp_sdk",
      "code": "if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
      "context": [
        "                        error_text = await response.text()",
        "                        logger.error(f\"❌ transformer server返回错误: {response.status} - {error_text}\")",
        "                        # 失败时回退到本地处理",
        "                        if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
        "                            return {\"anp_result\": {\"status\": \"error\",",
        "                                                   \"message\": f\"transformer server错误: {response.status}\"}}",
        "        except Exception as e:"
      ],
      "function": "process_agent_message",
      "class": "unknown",
      "full_match": "config.anp_sdk"
    },
    {
      "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
      "line": 256,
      "type": "config_attribute_access",
      "config_key": "anp_sdk",
      "code": "if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
      "context": [
        "        except Exception as e:",
        "            logger.error(f\"❌ transformer server失败: {e}\")",
        "            # 失败时回退到本地处理",
        "            if not getattr(config.anp_sdk, \"fallback_to_local\", True):",
        "                return {\"anp_result\": {\"status\": \"error\", \"message\": f\"transformer server连接失败: {str(e)}\"}}",
        "            logger.debug(\"⚠️ 回退到本地处理\")",
        ""
      ],
      "function": "process_agent_message",
      "class": "unknown",
      "full_match": "config.anp_sdk"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
      "line": 188,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    def __init__(self, user_dir: Optional[str] = None):",
        "        if hasattr(self, '_initialized') and self._initialized:",
        "            return",
        "        config = get_global_config()",
        "        self._user_dir = user_dir or config.anp_sdk.user_did_path",
        "",
        "        # 提供多种索引方式，提高查询效率"
      ],
      "function": "__init__",
      "class": "LocalUserDataManager",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
      "line": 703,
      "type": "get_global_config",
      "code": "config=get_global_config()",
      "context": [
        "    if not all(field in user_iput for field in required_fields):",
        "        logger.error(\"缺少必需的参数字段\")",
        "        return None",
        "    config=get_global_config()",
        "",
        "    userdid_filepath = config.anp_sdk.user_did_path",
        "    userdid_filepath = UnifiedConfig.resolve_path(userdid_filepath)"
      ],
      "function": "create_did_user",
      "class": "LocalUserDataManager",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
      "line": 188,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    def __init__(self, user_dir: Optional[str] = None):",
        "        if hasattr(self, '_initialized') and self._initialized:",
        "            return",
        "        config = get_global_config()",
        "        self._user_dir = user_dir or config.anp_sdk.user_did_path",
        "",
        "        # 提供多种索引方式，提高查询效率"
      ],
      "function": "__init__",
      "class": "LocalUserDataManager",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
      "line": 244,
      "type": "get_global_config",
      "code": "key_id = get_global_config().anp_sdk.user_did_key_id  # 使用默认值作为后备",
      "context": [
        "",
        "                if not key_id:",
        "                    logger.warning(f\"无法在 {folder_name} 的DID文档中确定key_id\")",
        "                    key_id = get_global_config().anp_sdk.user_did_key_id  # 使用默认值作为后备",
        "",
        "                password_paths = {",
        "                    \"did_private_key_file_path\": os.path.join(user_folder_path, f\"{key_id}_private.pem\"),"
      ],
      "function": "load_all_users",
      "class": "LocalUserDataManager",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
      "line": 514,
      "type": "get_global_config",
      "code": "key_id = get_global_config().anp_sdk.user_did_key_id",
      "context": [
        "            # 构建密钥路径",
        "            key_id = self.parse_key_id_from_did_doc(did_doc)",
        "            if not key_id:",
        "                key_id = get_global_config().anp_sdk.user_did_key_id",
        "",
        "            password_paths = {",
        "                \"did_private_key_file_path\": os.path.join(user_folder_path, f\"{key_id}_private.pem\"),"
      ],
      "function": "load_single_user",
      "class": "LocalUserDataManager",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
      "line": 703,
      "type": "get_global_config",
      "code": "config=get_global_config()",
      "context": [
        "    if not all(field in user_iput for field in required_fields):",
        "        logger.error(\"缺少必需的参数字段\")",
        "        return None",
        "    config=get_global_config()",
        "",
        "    userdid_filepath = config.anp_sdk.user_did_path",
        "    userdid_filepath = UnifiedConfig.resolve_path(userdid_filepath)"
      ],
      "function": "create_did_user",
      "class": "LocalUserDataManager",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
      "line": 46,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config, UnifiedConfig",
      "context": [
        "from cryptography.hazmat.primitives.asymmetric import ec, rsa",
        "",
        "",
        "from anp_foundation.config import get_global_config, UnifiedConfig",
        "",
        "",
        "class LocalUserData():"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
      "line": 46,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config, UnifiedConfig",
      "context": [
        "from cryptography.hazmat.primitives.asymmetric import ec, rsa",
        "",
        "",
        "from anp_foundation.config import get_global_config, UnifiedConfig",
        "",
        "",
        "class LocalUserData():"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
      "line": 189,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.user_did_path",
      "code": "self._user_dir = user_dir or config.anp_sdk.user_did_path",
      "context": [
        "        if hasattr(self, '_initialized') and self._initialized:",
        "            return",
        "        config = get_global_config()",
        "        self._user_dir = user_dir or config.anp_sdk.user_did_path",
        "",
        "        # 提供多种索引方式，提高查询效率",
        "        self.users_by_did: Dict[str, LocalUserData] = {}"
      ],
      "function": "__init__",
      "class": "LocalUserDataManager",
      "full_match": "config.anp_sdk.user_did_path"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
      "line": 705,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.user_did_path",
      "code": "userdid_filepath = config.anp_sdk.user_did_path",
      "context": [
        "        return None",
        "    config=get_global_config()",
        "",
        "    userdid_filepath = config.anp_sdk.user_did_path",
        "    userdid_filepath = UnifiedConfig.resolve_path(userdid_filepath)",
        "",
        ""
      ],
      "function": "create_did_user",
      "class": "LocalUserDataManager",
      "full_match": "config.anp_sdk.user_did_path"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
      "line": 244,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.user_did_key_id",
      "code": "key_id = get_global_config().anp_sdk.user_did_key_id  # 使用默认值作为后备",
      "context": [
        "",
        "                if not key_id:",
        "                    logger.warning(f\"无法在 {folder_name} 的DID文档中确定key_id\")",
        "                    key_id = get_global_config().anp_sdk.user_did_key_id  # 使用默认值作为后备",
        "",
        "                password_paths = {",
        "                    \"did_private_key_file_path\": os.path.join(user_folder_path, f\"{key_id}_private.pem\"),"
      ],
      "function": "load_all_users",
      "class": "LocalUserDataManager",
      "full_match": "get_global_config().anp_sdk.user_did_key_id"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
      "line": 514,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.user_did_key_id",
      "code": "key_id = get_global_config().anp_sdk.user_did_key_id",
      "context": [
        "            # 构建密钥路径",
        "            key_id = self.parse_key_id_from_did_doc(did_doc)",
        "            if not key_id:",
        "                key_id = get_global_config().anp_sdk.user_did_key_id",
        "",
        "            password_paths = {",
        "                \"did_private_key_file_path\": os.path.join(user_folder_path, f\"{key_id}_private.pem\"),"
      ],
      "function": "load_single_user",
      "class": "LocalUserDataManager",
      "full_match": "get_global_config().anp_sdk.user_did_key_id"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user.py",
      "line": 77,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "            logger.debug(f\"🆕 缓存ANPUser实例 (直接构造): {self.id}\")",
        "        else:",
        "            logger.debug(f\"🔄 ANPUser实例已存在于缓存中: {self.id}\")",
        "        config = get_global_config()",
        "        self.key_id = config.anp_sdk.user_did_key_id",
        "",
        "        self.did_document_path = self.user_data.did_doc_path"
      ],
      "function": "__init__",
      "class": "ANPUser",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user.py",
      "line": 77,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "            logger.debug(f\"🆕 缓存ANPUser实例 (直接构造): {self.id}\")",
        "        else:",
        "            logger.debug(f\"🔄 ANPUser实例已存在于缓存中: {self.id}\")",
        "        config = get_global_config()",
        "        self.key_id = config.anp_sdk.user_did_key_id",
        "",
        "        self.did_document_path = self.user_data.did_doc_path"
      ],
      "function": "__init__",
      "class": "ANPUser",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user.py",
      "line": 22,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "",
        "logger = logging.getLogger(__name__)",
        "",
        "from anp_foundation.config import get_global_config",
        "from anp_foundation.did.did_tool import parse_wba_did_host_port",
        "from anp_foundation.contact_manager import ContactManager",
        ""
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user.py",
      "line": 22,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "",
        "logger = logging.getLogger(__name__)",
        "",
        "from anp_foundation.config import get_global_config",
        "from anp_foundation.did.did_tool import parse_wba_did_host_port",
        "from anp_foundation.contact_manager import ContactManager",
        ""
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/anp_user.py",
      "line": 78,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.user_did_key_id",
      "code": "self.key_id = config.anp_sdk.user_did_key_id",
      "context": [
        "        else:",
        "            logger.debug(f\"🔄 ANPUser实例已存在于缓存中: {self.id}\")",
        "        config = get_global_config()",
        "        self.key_id = config.anp_sdk.user_did_key_id",
        "",
        "        self.did_document_path = self.user_data.did_doc_path",
        "        self.private_key_path = self.user_data.did_private_key_file_path"
      ],
      "function": "__init__",
      "class": "ANPUser",
      "full_match": "config.anp_sdk.user_did_key_id"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_tool.py",
      "line": 69,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        # Calculate time difference",
        "        time_diff = abs((current_time - request_time).total_seconds() / 60)",
        "",
        "        config = get_global_config()",
        "        nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
        "",
        "        # Verify timestamp is within valid period"
      ],
      "function": "verify_timestamp",
      "class": "AuthenticationContext",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_tool.py",
      "line": 311,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    Returns:",
        "        str: Encoded JWT token",
        "    \"\"\"",
        "    config = get_global_config()",
        "    token_expire_time = config.anp_sdk.token_expire_time",
        "",
        "    to_encode = data.copy()"
      ],
      "function": "create_access_token",
      "class": "AuthenticationContext",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_tool.py",
      "line": 69,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "        # Calculate time difference",
        "        time_diff = abs((current_time - request_time).total_seconds() / 60)",
        "",
        "        config = get_global_config()",
        "        nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
        "",
        "        # Verify timestamp is within valid period"
      ],
      "function": "verify_timestamp",
      "class": "AuthenticationContext",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_tool.py",
      "line": 311,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    Returns:",
        "        str: Encoded JWT token",
        "    \"\"\"",
        "    config = get_global_config()",
        "    token_expire_time = config.anp_sdk.token_expire_time",
        "",
        "    to_encode = data.copy()"
      ],
      "function": "create_access_token",
      "class": "AuthenticationContext",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_tool.py",
      "line": 17,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "from anp_foundation.did.agent_connect_hotpatch.authentication.did_wba_auth_header_memory import DIDWbaAuthHeaderMemory",
        "import logging",
        "",
        "from anp_foundation.config import get_global_config",
        "",
        "",
        "logger = logging.getLogger(__name__)"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_tool.py",
      "line": 17,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "from anp_foundation.did.agent_connect_hotpatch.authentication.did_wba_auth_header_memory import DIDWbaAuthHeaderMemory",
        "import logging",
        "",
        "from anp_foundation.config import get_global_config",
        "",
        "",
        "logger = logging.getLogger(__name__)"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_tool.py",
      "line": 70,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.nonce_expire_minutes",
      "code": "nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
      "context": [
        "        time_diff = abs((current_time - request_time).total_seconds() / 60)",
        "",
        "        config = get_global_config()",
        "        nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
        "",
        "        # Verify timestamp is within valid period",
        "        if time_diff > nonce_expire_minutes:"
      ],
      "function": "verify_timestamp",
      "class": "AuthenticationContext",
      "full_match": "config.anp_sdk.nonce_expire_minutes"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_tool.py",
      "line": 312,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.token_expire_time",
      "code": "token_expire_time = config.anp_sdk.token_expire_time",
      "context": [
        "        str: Encoded JWT token",
        "    \"\"\"",
        "    config = get_global_config()",
        "    token_expire_time = config.anp_sdk.token_expire_time",
        "",
        "    to_encode = data.copy()",
        "    expires = datetime.now(timezone.utc) + (timedelta(minutes=expires_delta) if expires_delta else timedelta(seconds=token_expire_time))"
      ],
      "function": "create_access_token",
      "class": "AuthenticationContext",
      "full_match": "config.anp_sdk.token_expire_time"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_tool.py",
      "line": 322,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.jwt_algorithm",
      "code": "jwt_algorithm = config.anp_sdk.jwt_algorithm",
      "context": [
        "        logger.debug(\"Invalid JWT private key object provided\")",
        "        raise HTTPException(status_code=500, detail=\"Internal anp_servicepoint error during token generation\")",
        "",
        "    jwt_algorithm = config.anp_sdk.jwt_algorithm",
        "    # Create the JWT token using RS256 algorithm with private key",
        "    encoded_jwt = jwt.encode(",
        "        to_encode,"
      ],
      "function": "create_access_token",
      "class": "AuthenticationContext",
      "full_match": "config.anp_sdk.jwt_algorithm"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_format_manager.py",
      "line": 37,
      "type": "get_global_config",
      "code": "self.config = get_global_config()",
      "context": [
        "    ",
        "    def __init__(self):",
        "        \"\"\"初始化DID格式管理器\"\"\"",
        "        self.config = get_global_config()",
        "        self.domain_manager = get_domain_manager()",
        "        self._format_cache = {}",
        "        "
      ],
      "function": "__init__",
      "class": "DidFormatManager",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_format_manager.py",
      "line": 37,
      "type": "get_global_config",
      "code": "self.config = get_global_config()",
      "context": [
        "    ",
        "    def __init__(self):",
        "        \"\"\"初始化DID格式管理器\"\"\"",
        "        self.config = get_global_config()",
        "        self.domain_manager = get_domain_manager()",
        "        self._format_cache = {}",
        "        "
      ],
      "function": "__init__",
      "class": "DidFormatManager",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_format_manager.py",
      "line": 27,
      "type": "get_global_config",
      "code": "from ..config import get_global_config",
      "context": [
        "from pathlib import Path",
        "from typing import Dict, Optional, Tuple, List",
        "",
        "from ..config import get_global_config",
        "from anp_foundation.domain import get_domain_manager",
        "",
        "logger = logging.getLogger(__name__)"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_format_manager.py",
      "line": 27,
      "type": "get_global_config",
      "code": "from ..config import get_global_config",
      "context": [
        "from pathlib import Path",
        "from typing import Dict, Optional, Tuple, List",
        "",
        "from ..config import get_global_config",
        "from anp_foundation.domain import get_domain_manager",
        "",
        "logger = logging.getLogger(__name__)"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_format_manager.py",
      "line": 233,
      "type": "config_attribute_access",
      "config_key": "did_config.creatable_user_types",
      "code": "creatable_types = self.config.did_config.creatable_user_types",
      "context": [
        "            bool: 是否可以创建",
        "        \"\"\"",
        "        try:",
        "            creatable_types = self.config.did_config.creatable_user_types",
        "            return user_type in creatable_types",
        "        except AttributeError:",
        "            # 配置中没有相关设置，默认只允许创建user类型"
      ],
      "function": "can_create_user_type",
      "class": "DidFormatManager",
      "full_match": "config.did_config.creatable_user_types"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_format_manager.py",
      "line": 329,
      "type": "config_attribute_access",
      "config_key": "did_config.format_template",
      "code": "return self.config.did_config.format_template",
      "context": [
        "    def _get_format_template(self) -> str:",
        "        \"\"\"获取DID格式模板\"\"\"",
        "        try:",
        "            return self.config.did_config.format_template",
        "        except AttributeError:",
        "            return \"did:{method}:{host}:{method}:{user_type}:{user_id}\"",
        "    "
      ],
      "function": "_get_format_template",
      "class": "DidFormatManager",
      "full_match": "config.did_config.format_template"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_format_manager.py",
      "line": 336,
      "type": "config_attribute_access",
      "config_key": "did_config.method",
      "code": "return self.config.did_config.method",
      "context": [
        "    def _get_method(self) -> str:",
        "        \"\"\"获取DID方法名\"\"\"",
        "        try:",
        "            return self.config.did_config.method",
        "        except AttributeError:",
        "            return \"wba\"",
        "    "
      ],
      "function": "_get_method",
      "class": "DidFormatManager",
      "full_match": "config.did_config.method"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_format_manager.py",
      "line": 360,
      "type": "config_attribute_access",
      "config_key": "did_config.user_types",
      "code": "user_types = self.config.did_config.user_types",
      "context": [
        "            List[str]: 用户类型列表",
        "        \"\"\"",
        "        try:",
        "            user_types = self.config.did_config.user_types",
        "            if hasattr(user_types, 'user'):",
        "                return [user_types.user, user_types.hostuser, user_types.test]",
        "            elif hasattr(user_types, 'values'):"
      ],
      "function": "get_supported_user_types",
      "class": "DidFormatManager",
      "full_match": "config.did_config.user_types"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/did/did_format_manager.py",
      "line": 390,
      "type": "config_attribute_access",
      "config_key": "did_config.creatable_user_types",
      "code": "return list(self.config.did_config.creatable_user_types)",
      "context": [
        "            List[str]: 可创建的用户类型列表",
        "        \"\"\"",
        "        try:",
        "            return list(self.config.did_config.creatable_user_types)",
        "        except AttributeError:",
        "            return [\"user\"]",
        "    "
      ],
      "function": "get_creatable_user_types",
      "class": "DidFormatManager",
      "full_match": "config.did_config.creatable_user_types"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/config/__init__.py",
      "line": 26,
      "type": "get_global_config",
      "code": "from .unified_config import UnifiedConfig, set_global_config, get_global_config",
      "context": [
        "",
        "from . import config_types",
        "# 导入新的统一配置",
        "from .unified_config import UnifiedConfig, set_global_config, get_global_config",
        "",
        "# 使用 __all__ 明确声明包的公共接口，这是一个非常好的实践",
        "__all__ = ["
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/config/__init__.py",
      "line": 26,
      "type": "get_global_config",
      "code": "from .unified_config import UnifiedConfig, set_global_config, get_global_config",
      "context": [
        "",
        "from . import config_types",
        "# 导入新的统一配置",
        "from .unified_config import UnifiedConfig, set_global_config, get_global_config",
        "",
        "# 使用 __all__ 明确声明包的公共接口，这是一个非常好的实践",
        "__all__ = ["
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/config/__init__.py",
      "line": 18,
      "type": "config_attribute_access",
      "config_key": "py",
      "code": "- 统一配置管理（unified_config.py）",
      "context": [
        "\"\"\"ANP Open SDK 配置模块",
        "",
        "提供统一的配置管理功能，支持：",
        "- 统一配置管理（unified_config.py）",
        "- 类型提示和协议（config_types.py）",
        "- 向后兼容的动态配置（dynamic_config.py）",
        ""
      ],
      "function": "unknown",
      "class": "unknown",
      "full_match": "config.py"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/config/__init__.py",
      "line": 20,
      "type": "config_attribute_access",
      "config_key": "py",
      "code": "- 向后兼容的动态配置（dynamic_config.py）",
      "context": [
        "提供统一的配置管理功能，支持：",
        "- 统一配置管理（unified_config.py）",
        "- 类型提示和协议（config_types.py）",
        "- 向后兼容的动态配置（dynamic_config.py）",
        "",
        "\"\"\"",
        ""
      ],
      "function": "unknown",
      "class": "unknown",
      "full_match": "config.py"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/config/unified_config.py",
      "line": 52,
      "type": "get_global_config",
      "code": "def get_global_config() -> 'BaseUnifiedConfigProtocol':",
      "context": [
        "        print(\"Warning: Global config is being overridden.\")",
        "    _global_config = config_instance",
        "",
        "def get_global_config() -> 'BaseUnifiedConfigProtocol':",
        "    \"\"\"",
        "    【解析函数】供库内其他模块调用，获取已设置的全局配置实例。",
        "    \"\"\""
      ],
      "function": "get_global_config",
      "class": "unknown",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/config/unified_config.py",
      "line": 246,
      "type": "config_attribute_access",
      "config_key": "yaml",
      "code": "return self._app_root / \"unified_config.yaml\"",
      "context": [
        "        if config_file:",
        "            return Path(config_file).resolve()",
        "            # 默认配置文件路径基于 app_root",
        "        return self._app_root / \"unified_config.yaml\"",
        "",
        "",
        ""
      ],
      "function": "_resolve_config_file",
      "class": "UnifiedConfig",
      "full_match": "config.yaml"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/config/unified_config.py",
      "line": 306,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "separator = path_config.get('path_separator')",
      "context": [
        "        if path_str.startswith('[') and path_str.endswith(']'):",
        "            path_str = os.environ.get('PATH', '')",
        "        path_config = self._config_data.get('path_config', {})",
        "        separator = path_config.get('path_separator')",
        "        if not separator:",
        "            separator = ';' if os.name == 'nt' else ':'",
        "        paths = []"
      ],
      "function": "_process_path_list",
      "class": "UnifiedConfig",
      "full_match": "config.get"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/config/unified_config.py",
      "line": 467,
      "type": "config_attribute_access",
      "config_key": "default.yaml",
      "code": "default_config_path = self._app_root / 'unified_config.default.yaml'",
      "context": [
        "        return self._config_data.copy()",
        "",
        "    def _get_default_config(self) -> dict:",
        "        default_config_path = self._app_root / 'unified_config.default.yaml'",
        "        if not default_config_path.exists():",
        "            self.logger.warning(f\"默认配置文件 {default_config_path} 不存在。将使用空配置。\")",
        "            return {}"
      ],
      "function": "_get_default_config",
      "class": "UnifiedConfig",
      "full_match": "config.default.yaml"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/auth/auth_verifier.py",
      "line": 209,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "                logger.debug(\"Failed to load JWT public key\")",
        "                raise HTTPException(status_code=500, detail=\"Internal anp_servicepoint error during token verification\")",
        "",
        "            config = get_global_config()",
        "            jwt_algorithm = config.anp_sdk.jwt_algorithm",
        "",
        "            # Decode and verify the token using the public key"
      ],
      "function": "_verify_bearer_token",
      "class": "unknown",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/auth/auth_verifier.py",
      "line": 261,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    \"\"\"",
        "    from datetime import datetime, timezone, timedelta",
        "    try:",
        "        config = get_global_config()",
        "        nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
        "    except Exception:",
        "        nonce_expire_minutes = 5"
      ],
      "function": "is_valid_server_nonce",
      "class": "unknown",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/auth/auth_verifier.py",
      "line": 283,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    logger.debug(f\"Nonce accepted and marked as used: {nonce}\")",
        "    return True",
        "async def _generate_wba_auth_response\t(did, is_two_way_auth, resp_did):",
        "    config = get_global_config()",
        "    expiration_time = config.anp_sdk.token_expire_time",
        "   # 生成访问令牌",
        "    resp_did_agent = ANPUser.from_did(resp_did)"
      ],
      "function": "_generate_wba_auth_response",
      "class": "unknown",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/auth/auth_verifier.py",
      "line": 209,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "                logger.debug(\"Failed to load JWT public key\")",
        "                raise HTTPException(status_code=500, detail=\"Internal anp_servicepoint error during token verification\")",
        "",
        "            config = get_global_config()",
        "            jwt_algorithm = config.anp_sdk.jwt_algorithm",
        "",
        "            # Decode and verify the token using the public key"
      ],
      "function": "_verify_bearer_token",
      "class": "unknown",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/auth/auth_verifier.py",
      "line": 261,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    \"\"\"",
        "    from datetime import datetime, timezone, timedelta",
        "    try:",
        "        config = get_global_config()",
        "        nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
        "    except Exception:",
        "        nonce_expire_minutes = 5"
      ],
      "function": "is_valid_server_nonce",
      "class": "unknown",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/auth/auth_verifier.py",
      "line": 283,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    logger.debug(f\"Nonce accepted and marked as used: {nonce}\")",
        "    return True",
        "async def _generate_wba_auth_response\t(did, is_two_way_auth, resp_did):",
        "    config = get_global_config()",
        "    expiration_time = config.anp_sdk.token_expire_time",
        "   # 生成访问令牌",
        "    resp_did_agent = ANPUser.from_did(resp_did)"
      ],
      "function": "_generate_wba_auth_response",
      "class": "unknown",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/auth/auth_verifier.py",
      "line": 28,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "from agent_connect.authentication.did_wba import extract_auth_header_parts",
        "from starlette.requests import Request",
        "",
        "from anp_foundation.config import get_global_config",
        "from .auth_initiator import _resolve_did_document_insecurely",
        "from anp_foundation.did.did_tool import AuthenticationContext, \\",
        "    create_access_token, \\"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/auth/auth_verifier.py",
      "line": 28,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "from agent_connect.authentication.did_wba import extract_auth_header_parts",
        "from starlette.requests import Request",
        "",
        "from anp_foundation.config import get_global_config",
        "from .auth_initiator import _resolve_did_document_insecurely",
        "from anp_foundation.did.did_tool import AuthenticationContext, \\",
        "    create_access_token, \\"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/auth/auth_verifier.py",
      "line": 210,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.jwt_algorithm",
      "code": "jwt_algorithm = config.anp_sdk.jwt_algorithm",
      "context": [
        "                raise HTTPException(status_code=500, detail=\"Internal anp_servicepoint error during token verification\")",
        "",
        "            config = get_global_config()",
        "            jwt_algorithm = config.anp_sdk.jwt_algorithm",
        "",
        "            # Decode and verify the token using the public key",
        "            payload = jwt.decode("
      ],
      "function": "_verify_bearer_token",
      "class": "unknown",
      "full_match": "config.anp_sdk.jwt_algorithm"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/auth/auth_verifier.py",
      "line": 262,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.nonce_expire_minutes",
      "code": "nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
      "context": [
        "    from datetime import datetime, timezone, timedelta",
        "    try:",
        "        config = get_global_config()",
        "        nonce_expire_minutes = config.anp_sdk.nonce_expire_minutes",
        "    except Exception:",
        "        nonce_expire_minutes = 5",
        ""
      ],
      "function": "is_valid_server_nonce",
      "class": "unknown",
      "full_match": "config.anp_sdk.nonce_expire_minutes"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/auth/auth_verifier.py",
      "line": 284,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.token_expire_time",
      "code": "expiration_time = config.anp_sdk.token_expire_time",
      "context": [
        "    return True",
        "async def _generate_wba_auth_response\t(did, is_two_way_auth, resp_did):",
        "    config = get_global_config()",
        "    expiration_time = config.anp_sdk.token_expire_time",
        "   # 生成访问令牌",
        "    resp_did_agent = ANPUser.from_did(resp_did)",
        "    access_token = create_access_token("
      ],
      "function": "_generate_wba_auth_response",
      "class": "unknown",
      "full_match": "config.anp_sdk.token_expire_time"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/utils/log_base.py",
      "line": 55,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    Args:",
        "        config: 一个符合 UnifiedConfigProtocol 协议的完整配置对象。",
        "    \"\"\"",
        "    config = get_global_config()",
        "",
        "    global _is_logging_configured",
        "    if _is_logging_configured:"
      ],
      "function": "setup_logging",
      "class": "ColoredFormatter",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/utils/log_base.py",
      "line": 55,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    Args:",
        "        config: 一个符合 UnifiedConfigProtocol 协议的完整配置对象。",
        "    \"\"\"",
        "    config = get_global_config()",
        "",
        "    global _is_logging_configured",
        "    if _is_logging_configured:"
      ],
      "function": "setup_logging",
      "class": "ColoredFormatter",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/utils/log_base.py",
      "line": 20,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "import sys",
        "",
        "# 从我们的类型定义中导入协议",
        "from anp_foundation.config import get_global_config",
        "",
        "",
        "class ColoredFormatter(logging.Formatter):"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/utils/log_base.py",
      "line": 20,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "import sys",
        "",
        "# 从我们的类型定义中导入协议",
        "from anp_foundation.config import get_global_config",
        "",
        "",
        "class ColoredFormatter(logging.Formatter):"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/utils/log_base.py",
      "line": 72,
      "type": "config_attribute_access",
      "config_key": "detail",
      "code": "log_file = getattr(log_config.detail, 'file', None)",
      "context": [
        "    if log_config:",
        "        log_level_str = getattr(log_config, 'log_level', 'INFO').upper()",
        "        if hasattr(log_config, 'detail'):",
        "            log_file = getattr(log_config.detail, 'file', None)",
        "            max_size_mb = getattr(log_config.detail, 'max_size', 10)",
        "",
        "    # 将字符串级别转换为 logging 的整数级别"
      ],
      "function": "setup_logging",
      "class": "ColoredFormatter",
      "full_match": "config.detail"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/utils/log_base.py",
      "line": 73,
      "type": "config_attribute_access",
      "config_key": "detail",
      "code": "max_size_mb = getattr(log_config.detail, 'max_size', 10)",
      "context": [
        "        log_level_str = getattr(log_config, 'log_level', 'INFO').upper()",
        "        if hasattr(log_config, 'detail'):",
        "            log_file = getattr(log_config.detail, 'file', None)",
        "            max_size_mb = getattr(log_config.detail, 'max_size', 10)",
        "",
        "    # 将字符串级别转换为 logging 的整数级别",
        "    log_level = getattr(logging, log_level_str, logging.INFO)"
      ],
      "function": "setup_logging",
      "class": "ColoredFormatter",
      "full_match": "config.detail"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/utils/log_base.py",
      "line": 98,
      "type": "config_attribute_access",
      "config_key": "resolve_path",
      "code": "log_file_path = config.resolve_path(log_file)",
      "context": [
        "    if log_file:",
        "        try:",
        "            # 使用 config 对象的方法来解析路径，这是最健壮的方式",
        "            log_file_path = config.resolve_path(log_file)",
        "",
        "            # 确保目录存在，不再使用 sudo",
        "            log_file_path.parent.mkdir(parents=True, exist_ok=True)"
      ],
      "function": "setup_logging",
      "class": "ColoredFormatter",
      "full_match": "config.resolve_path"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/utils/log_base.py",
      "line": 62,
      "type": "getattr_config_access",
      "config_key": "log_settings",
      "code": "log_config = getattr(config, 'log_settings', None)",
      "context": [
        "        return",
        "",
        "    # 从配置中安全地获取日志设置",
        "    log_config = getattr(config, 'log_settings', None)",
        "",
        "    # 默认值",
        "    log_level_str = \"INFO\""
      ],
      "function": "setup_logging",
      "class": "ColoredFormatter",
      "full_match": "getattr(config, 'log_settings'"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
      "line": 35,
      "type": "get_global_config",
      "code": "self.config = get_global_config()",
      "context": [
        "    ",
        "    def __init__(self):",
        "        \"\"\"初始化域名管理器\"\"\"",
        "        self.config = get_global_config()",
        "        self._supported_domains = None",
        "        self._domain_config_cache = {}",
        "        "
      ],
      "function": "__init__",
      "class": "DomainManager",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
      "line": 35,
      "type": "get_global_config",
      "code": "self.config = get_global_config()",
      "context": [
        "    ",
        "    def __init__(self):",
        "        \"\"\"初始化域名管理器\"\"\"",
        "        self.config = get_global_config()",
        "        self._supported_domains = None",
        "        self._domain_config_cache = {}",
        "        "
      ],
      "function": "__init__",
      "class": "DomainManager",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
      "line": 26,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "from typing import Dict, Tuple",
        "from urllib.parse import urlparse",
        "",
        "from anp_foundation.config import get_global_config",
        "",
        "logger = logging.getLogger(__name__)",
        ""
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
      "line": 26,
      "type": "get_global_config",
      "code": "from anp_foundation.config import get_global_config",
      "context": [
        "from typing import Dict, Tuple",
        "from urllib.parse import urlparse",
        "",
        "from anp_foundation.config import get_global_config",
        "",
        "logger = logging.getLogger(__name__)",
        ""
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
      "line": 44,
      "type": "config_attribute_access",
      "config_key": "did_config.hosts",
      "code": "hosts_config = self.config.did_config.hosts",
      "context": [
        "        \"\"\"获取支持的域名列表\"\"\"",
        "        if self._supported_domains is None:",
        "            try:",
        "                hosts_config = self.config.did_config.hosts",
        "                ",
        "                # 如果是ConfigNode对象，需要转换为字典",
        "                if hasattr(hosts_config, '_data'):"
      ],
      "function": "supported_domains",
      "class": "DomainManager",
      "full_match": "config.did_config.hosts"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
      "line": 48,
      "type": "config_attribute_access",
      "config_key": "_data",
      "code": "self._supported_domains = hosts_config._data",
      "context": [
        "                ",
        "                # 如果是ConfigNode对象，需要转换为字典",
        "                if hasattr(hosts_config, '_data'):",
        "                    self._supported_domains = hosts_config._data",
        "                elif hasattr(hosts_config, '__dict__'):",
        "                    # 尝试从对象属性构建字典",
        "                    self._supported_domains = {}"
      ],
      "function": "supported_domains",
      "class": "DomainManager",
      "full_match": "config._data"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
      "line": 66,
      "type": "config_attribute_access",
      "config_key": "hosts",
      "code": "logger.warning(\"配置中未找到did_config.hosts，使用默认域名配置\")",
      "context": [
        "                    ",
        "            except AttributeError:",
        "                # 如果配置中没有did_config，使用默认值",
        "                logger.warning(\"配置中未找到did_config.hosts，使用默认域名配置\")",
        "                self._supported_domains = {",
        "                    \"localhost\": 9527,",
        "                    \"user.localhost\": 9527,"
      ],
      "function": "supported_domains",
      "class": "DomainManager",
      "full_match": "config.hosts"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
      "line": 121,
      "type": "config_attribute_access",
      "config_key": "did_config.parsing.default_host",
      "code": "default_host = self.config.did_config.parsing.default_host",
      "context": [
        "    def _get_default_host_port(self) -> Tuple[str, int]:",
        "        \"\"\"获取默认的主机和端口\"\"\"",
        "        try:",
        "            default_host = self.config.did_config.parsing.default_host",
        "            default_port = self.config.did_config.parsing.default_port",
        "            return default_host, default_port",
        "        except AttributeError:"
      ],
      "function": "_get_default_host_port",
      "class": "DomainManager",
      "full_match": "config.did_config.parsing.default_host"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
      "line": 122,
      "type": "config_attribute_access",
      "config_key": "did_config.parsing.default_port",
      "code": "default_port = self.config.did_config.parsing.default_port",
      "context": [
        "        \"\"\"获取默认的主机和端口\"\"\"",
        "        try:",
        "            default_host = self.config.did_config.parsing.default_host",
        "            default_port = self.config.did_config.parsing.default_port",
        "            return default_host, default_port",
        "        except AttributeError:",
        "            return \"localhost\", 9527"
      ],
      "function": "_get_default_host_port",
      "class": "DomainManager",
      "full_match": "config.did_config.parsing.default_port"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
      "line": 211,
      "type": "config_attribute_access",
      "config_key": "unified_config",
      "code": "from anp_foundation.config.unified_config import UnifiedConfig",
      "context": [
        "        \"\"\"",
        "        try:",
        "            # 使用UnifiedConfig的标准路径解析功能",
        "            from anp_foundation.config.unified_config import UnifiedConfig",
        "            ",
        "            # 构建相对于APP_ROOT的数据路径",
        "            data_path_template = f\"{{APP_ROOT}}/{self.get_data_path_for_domain(domain, port)}\""
      ],
      "function": "get_all_data_paths",
      "class": "DomainManager",
      "full_match": "config.unified_config"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
      "line": 321,
      "type": "config_attribute_access",
      "config_key": "did_config.insecure_patterns",
      "code": "insecure_patterns = self.config.did_config.insecure_patterns",
      "context": [
        "        ",
        "        # 检查是否是不安全的域名（仅在非生产环境允许）",
        "        try:",
        "            insecure_patterns = self.config.did_config.insecure_patterns",
        "            allow_insecure = self.config.did_config.parsing.allow_insecure",
        "            ",
        "            if not allow_insecure:"
      ],
      "function": "validate_domain_access",
      "class": "DomainManager",
      "full_match": "config.did_config.insecure_patterns"
    },
    {
      "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
      "line": 322,
      "type": "config_attribute_access",
      "config_key": "did_config.parsing.allow_insecure",
      "code": "allow_insecure = self.config.did_config.parsing.allow_insecure",
      "context": [
        "        # 检查是否是不安全的域名（仅在非生产环境允许）",
        "        try:",
        "            insecure_patterns = self.config.did_config.insecure_patterns",
        "            allow_insecure = self.config.did_config.parsing.allow_insecure",
        "            ",
        "            if not allow_insecure:",
        "                for pattern in insecure_patterns:"
      ],
      "function": "validate_domain_access",
      "class": "DomainManager",
      "full_match": "config.did_config.parsing.allow_insecure"
    },
    {
      "file": "examples/flow_host_did/demo_complete_flow.py",
      "line": 22,
      "type": "config_attribute_access",
      "config_key": "unified_config",
      "code": "from anp_foundation.config.unified_config import UnifiedConfig, set_global_config",
      "context": [
        "",
        "from anp_foundation.anp_user import ANPUser",
        "from anp_server.baseline.anp_server_baseline import ANP_Server",
        "from anp_foundation.config.unified_config import UnifiedConfig, set_global_config",
        "from anp_foundation.anp_user_local_data import LocalUserDataManager",
        "from anp_foundation.domain import get_domain_manager",
        ""
      ],
      "function": "unknown",
      "class": "unknown",
      "full_match": "config.unified_config"
    },
    {
      "file": "examples/flow_host_did/demo_complete_flow.py",
      "line": 341,
      "type": "config_attribute_access",
      "config_key": "default.yaml",
      "code": "config_file = project_root / \"unified_config.default.yaml\"",
      "context": [
        "        print(\"⚙️ 初始化配置...\")",
        "        config_file = project_root / \"unified_config_framework_demo.yaml\"",
        "        if not config_file.exists():",
        "            config_file = project_root / \"unified_config.default.yaml\"",
        "        ",
        "        if config_file.exists():",
        "            config = UnifiedConfig(config_file=str(config_file), app_root=str(project_root))"
      ],
      "function": "main",
      "class": "HostedDIDDemo",
      "full_match": "config.default.yaml"
    },
    {
      "file": "examples/flow_anp_user_portal/anp_user_service/app/routers/chat.py",
      "line": 27,
      "type": "config_attribute_access",
      "config_key": "secrets.openai_api_key",
      "code": "api_key = config.secrets.openai_api_key",
      "context": [
        "",
        "    # Get API key from environment variables via settings",
        "",
        "    api_key = config.secrets.openai_api_key",
        "    ",
        "    if not api_key:",
        "        raise HTTPException("
      ],
      "function": "chat_with_personal_agent",
      "class": "unknown",
      "full_match": "config.secrets.openai_api_key"
    },
    {
      "file": "examples/flow_anp_user_portal/anp_user_service/app/routers/chat.py",
      "line": 38,
      "type": "config_attribute_access",
      "config_key": "anp_user_service.api_base",
      "code": "apiBase=HttpUrl(f\"http://{config.anp_user_service.api_base}\"),  # 必须是 http(s):// 开头的有效URL",
      "context": [
        "    from pydantic import HttpUrl",
        "",
        "    llm_config = LLMConfig(",
        "        apiBase=HttpUrl(f\"http://{config.anp_user_service.api_base}\"),  # 必须是 http(s):// 开头的有效URL",
        "        apiKey=api_key,",
        "        model=config.anp_user_service.model_name",
        "    )"
      ],
      "function": "chat_with_personal_agent",
      "class": "unknown",
      "full_match": "config.anp_user_service.api_base"
    },
    {
      "file": "examples/flow_anp_user_portal/anp_user_service/app/routers/chat.py",
      "line": 40,
      "type": "config_attribute_access",
      "config_key": "anp_user_service.model_name",
      "code": "model=config.anp_user_service.model_name",
      "context": [
        "    llm_config = LLMConfig(",
        "        apiBase=HttpUrl(f\"http://{config.anp_user_service.api_base}\"),  # 必须是 http(s):// 开头的有效URL",
        "        apiKey=api_key,",
        "        model=config.anp_user_service.model_name",
        "    )",
        "",
        ""
      ],
      "function": "chat_with_personal_agent",
      "class": "unknown",
      "full_match": "config.anp_user_service.model_name"
    },
    {
      "file": "examples/flow_anp_user_portal/anp_user_service/app/core/config.py",
      "line": 9,
      "type": "config_attribute_access",
      "config_key": "dynamic_config",
      "code": "# This is a placeholder; you'll need to ensure anp_foundation.config.dynamic_config is loaded correctly.",
      "context": [
        "USERS_CREDENTIALS_FILE = BACKEND_BASE_DIR / \"users_credentials.json\"",
        "",
        "# ANP SDK related configurations - these might come from .env or anp_foundation's own config",
        "# This is a placeholder; you'll need to ensure anp_foundation.config.dynamic_config is loaded correctly.",
        "# For example, if anp_foundation relies on a .env file in the project root:",
        "from dotenv import load_dotenv",
        "load_dotenv(dotenv_path=BACKEND_BASE_DIR.parent / '.env') # Assumes .env is in mcp-chat-extension root"
      ],
      "function": "unknown",
      "class": "unknown",
      "full_match": "config.dynamic_config"
    },
    {
      "file": "examples/flow_anp_user_portal/anp_user_service/app/core/config.py",
      "line": 16,
      "type": "config_attribute_access",
      "config_key": "legacy.dynamic_config",
      "code": "from anp_foundation.config.legacy.dynamic_config import dynamic_config",
      "context": [
        "",
        "# Attempt to import ANP SDK components. This relies on PYTHONPATH being set correctly.",
        "try:",
        "    from anp_foundation.config.legacy.dynamic_config import dynamic_config",
        "    ANP_USER_DID_PATH_KEY = 'anp_user_service.user_did_path' # The key used in your ANP SDK's config",
        "    # Example: ANP_USER_BASE_PATH = Path(dynamic_config.get(ANP_USER_DID_PATH_KEY))",
        "except ImportError:"
      ],
      "function": "unknown",
      "class": "unknown",
      "full_match": "config.legacy.dynamic_config"
    },
    {
      "file": "examples/flow_anp_user_portal/anp_user_service/app/core/config.py",
      "line": 18,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "# Example: ANP_USER_BASE_PATH = Path(dynamic_config.get(ANP_USER_DID_PATH_KEY))",
      "context": [
        "try:",
        "    from anp_foundation.config.legacy.dynamic_config import dynamic_config",
        "    ANP_USER_DID_PATH_KEY = 'anp_user_service.user_did_path' # The key used in your ANP SDK's config",
        "    # Example: ANP_USER_BASE_PATH = Path(dynamic_config.get(ANP_USER_DID_PATH_KEY))",
        "except ImportError:",
        "    logger.debug(\"Warning: ANP SDK dynamic_config could not be imported. Paths may not be resolved correctly.\")",
        "    dynamic_config = None"
      ],
      "function": "unknown",
      "class": "unknown",
      "full_match": "config.get"
    },
    {
      "file": "examples/flow_anp_user_portal/anp_user_service/app/core/config.py",
      "line": 27,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "path_str = dynamic_config.get(ANP_USER_DID_PATH_KEY)",
      "context": [
        "# This function tries to get the user base path from ANP SDK's dynamic config",
        "def get_anp_user_base_path() -> Path:",
        "    if dynamic_config:",
        "        path_str = dynamic_config.get(ANP_USER_DID_PATH_KEY)",
        "        if path_str:",
        "            return Path(path_str)",
        "    logger.debug(f\"Warning: Could not get '{ANP_USER_DID_PATH_KEY}' from dynamic_config. Using fallback.\")"
      ],
      "function": "get_anp_user_base_path",
      "class": "unknown",
      "full_match": "config.get"
    },
    {
      "file": "examples/flow_anp_user_portal/anp_user_service/app/services/llm_service.py",
      "line": 38,
      "type": "config_attribute_access",
      "config_key": "apiKey",
      "code": "\"Authorization\": f\"Bearer {llm_config.apiKey}\"",
      "context": [
        "",
        "    headers = {",
        "        \"Content-Type\": \"application/json\",",
        "        \"Authorization\": f\"Bearer {llm_config.apiKey}\"",
        "    }",
        "    payload = {",
        "        \"model\": llm_config.model,"
      ],
      "function": "get_llm_response_with_rag",
      "class": "unknown",
      "full_match": "config.apiKey"
    },
    {
      "file": "examples/flow_anp_user_portal/anp_user_service/app/services/llm_service.py",
      "line": 41,
      "type": "config_attribute_access",
      "config_key": "model",
      "code": "\"model\": llm_config.model,",
      "context": [
        "        \"Authorization\": f\"Bearer {llm_config.apiKey}\"",
        "    }",
        "    payload = {",
        "        \"model\": llm_config.model,",
        "        \"messages\": [{\"role\": \"user\", \"content\": final_prompt}],",
        "        # Add other parameters like temperature, max_tokens if needed",
        "        # \"stream\": False # For simplicity, not using streaming here"
      ],
      "function": "get_llm_response_with_rag",
      "class": "unknown",
      "full_match": "config.model"
    },
    {
      "file": "examples/flow_anp_user_portal/anp_user_service/app/services/llm_service.py",
      "line": 51,
      "type": "config_attribute_access",
      "config_key": "apiBase",
      "code": "str(llm_config.apiBase).rstrip('/') + \"/chat/completions\", # Common path",
      "context": [
        "        async with httpx.AsyncClient() as client:",
        "            logger.debug(f\"start llm{payload}\" )",
        "            response = await client.post(",
        "                str(llm_config.apiBase).rstrip('/') + \"/chat/completions\", # Common path",
        "                json=payload,",
        "                headers=headers,",
        "                timeout=60.0 # Increased timeout for LLM calls"
      ],
      "function": "get_llm_response_with_rag",
      "class": "unknown",
      "full_match": "config.apiBase"
    },
    {
      "file": "examples/flow_anp_agent/flow_anp_agent.py",
      "line": 260,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    logger.debug(\"🚀 Starting Agent System Demo...\")",
        "    if os.getcwd() not in sys.path:",
        "        sys.path.append(os.getcwd())",
        "    config = get_global_config()",
        "",
        "    # 清除之前的Agent注册记录，初始化路由",
        "    AgentManager.clear_all_agents()"
      ],
      "function": "main",
      "class": "WeatherAgent",
      "pattern_matched": "config\\s*=\\s*get_global_config\\(\\)"
    },
    {
      "file": "examples/flow_anp_agent/flow_anp_agent.py",
      "line": 260,
      "type": "get_global_config",
      "code": "config = get_global_config()",
      "context": [
        "    logger.debug(\"🚀 Starting Agent System Demo...\")",
        "    if os.getcwd() not in sys.path:",
        "        sys.path.append(os.getcwd())",
        "    config = get_global_config()",
        "",
        "    # 清除之前的Agent注册记录，初始化路由",
        "    AgentManager.clear_all_agents()"
      ],
      "function": "main",
      "class": "WeatherAgent",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "examples/flow_anp_agent/flow_anp_agent.py",
      "line": 16,
      "type": "get_global_config",
      "code": "from anp_foundation.config import UnifiedConfig, set_global_config, get_global_config",
      "context": [
        "from anp_runtime.anp_service.agent_message_p2p import agent_msg_post",
        "",
        "",
        "from anp_foundation.config import UnifiedConfig, set_global_config, get_global_config",
        "from anp_foundation.utils.log_base import setup_logging",
        "import logging",
        "app_config = UnifiedConfig(config_file='unified_config_framework_demo.yaml')"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "from\\s+.*\\s+import\\s+.*get_global_config"
    },
    {
      "file": "examples/flow_anp_agent/flow_anp_agent.py",
      "line": 16,
      "type": "get_global_config",
      "code": "from anp_foundation.config import UnifiedConfig, set_global_config, get_global_config",
      "context": [
        "from anp_runtime.anp_service.agent_message_p2p import agent_msg_post",
        "",
        "",
        "from anp_foundation.config import UnifiedConfig, set_global_config, get_global_config",
        "from anp_foundation.utils.log_base import setup_logging",
        "import logging",
        "app_config = UnifiedConfig(config_file='unified_config_framework_demo.yaml')"
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "import\\s+.*get_global_config"
    },
    {
      "file": "examples/flow_anp_agent/flow_anp_agent.py",
      "line": 303,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.host",
      "code": "host = config.anp_sdk.host",
      "context": [
        "    # --- 启动SDK ---",
        "    logger.debug(\"\\n✅ All agents created with new system. Creating SDK instance...\")",
        "    svr = ANP_Server()",
        "    host = config.anp_sdk.host",
        "    port = config.anp_sdk.port",
        "    logger.debug(f\"⏳ 等待服务器启动 {host}:{port} ...\")",
        "    await launch_anp_server(host, port,svr)"
      ],
      "function": "main",
      "class": "WeatherAgent",
      "full_match": "config.anp_sdk.host"
    },
    {
      "file": "examples/flow_anp_agent/flow_anp_agent.py",
      "line": 304,
      "type": "config_attribute_access",
      "config_key": "anp_sdk.port",
      "code": "port = config.anp_sdk.port",
      "context": [
        "    logger.debug(\"\\n✅ All agents created with new system. Creating SDK instance...\")",
        "    svr = ANP_Server()",
        "    host = config.anp_sdk.host",
        "    port = config.anp_sdk.port",
        "    logger.debug(f\"⏳ 等待服务器启动 {host}:{port} ...\")",
        "    await launch_anp_server(host, port,svr)",
        "    logger.debug(\"✅ 服务器就绪，开始执行任务。\")"
      ],
      "function": "main",
      "class": "WeatherAgent",
      "full_match": "config.anp_sdk.port"
    },
    {
      "file": "scripts/agent_user_binding.py",
      "line": 31,
      "type": "get_global_config",
      "code": "setup_logging() # 假设 setup_logging 内部也改用 get_global_config()",
      "context": [
        "app_config = UnifiedConfig(config_file='unified_config_framework_demo.yaml')",
        "set_global_config(app_config)",
        "",
        "setup_logging() # 假设 setup_logging 内部也改用 get_global_config()",
        "logger = logging.getLogger(__name__)",
        "",
        ""
      ],
      "function": "unknown",
      "class": "unknown",
      "pattern_matched": "get_global_config\\(\\)"
    },
    {
      "file": "scripts/agent_user_binding.py",
      "line": 79,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "agent_name = config.get('name', 'Unknown')",
      "context": [
        "                    with open(mapping_file, 'r', encoding='utf-8') as f:",
        "                        config = yaml.safe_load(f)",
        "                    ",
        "                    agent_name = config.get('name', 'Unknown')",
        "                    agent_did = config.get('did', None)",
        "                    ",
        "                    # 🆕 处理共享DID配置"
      ],
      "function": "load_agent_mappings",
      "class": "AgentUserBindingManager",
      "full_match": "config.get"
    },
    {
      "file": "scripts/agent_user_binding.py",
      "line": 80,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "agent_did = config.get('did', None)",
      "context": [
        "                        config = yaml.safe_load(f)",
        "                    ",
        "                    agent_name = config.get('name', 'Unknown')",
        "                    agent_did = config.get('did', None)",
        "                    ",
        "                    # 🆕 处理共享DID配置",
        "                    share_did_config = config.get('share_did', {})"
      ],
      "function": "load_agent_mappings",
      "class": "AgentUserBindingManager",
      "full_match": "config.get"
    },
    {
      "file": "scripts/agent_user_binding.py",
      "line": 83,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "share_did_config = config.get('share_did', {})",
      "context": [
        "                    agent_did = config.get('did', None)",
        "                    ",
        "                    # 🆕 处理共享DID配置",
        "                    share_did_config = config.get('share_did', {})",
        "                    shared_did = None",
        "                    if share_did_config.get('enabled'):",
        "                        shared_did = share_did_config.get('shared_did')"
      ],
      "function": "load_agent_mappings",
      "class": "AgentUserBindingManager",
      "full_match": "config.get"
    },
    {
      "file": "scripts/agent_user_binding.py",
      "line": 85,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "if share_did_config.get('enabled'):",
      "context": [
        "                    # 🆕 处理共享DID配置",
        "                    share_did_config = config.get('share_did', {})",
        "                    shared_did = None",
        "                    if share_did_config.get('enabled'):",
        "                        shared_did = share_did_config.get('shared_did')",
        "                    ",
        "                    self.agent_mappings[str(mapping_file)] = {"
      ],
      "function": "load_agent_mappings",
      "class": "AgentUserBindingManager",
      "full_match": "config.get"
    },
    {
      "file": "scripts/agent_user_binding.py",
      "line": 86,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "shared_did = share_did_config.get('shared_did')",
      "context": [
        "                    share_did_config = config.get('share_did', {})",
        "                    shared_did = None",
        "                    if share_did_config.get('enabled'):",
        "                        shared_did = share_did_config.get('shared_did')",
        "                    ",
        "                    self.agent_mappings[str(mapping_file)] = {",
        "                        'config': config,"
      ],
      "function": "load_agent_mappings",
      "class": "AgentUserBindingManager",
      "full_match": "config.get"
    },
    {
      "file": "scripts/agent_user_binding.py",
      "line": 105,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "'path_prefix': share_did_config.get('path_prefix', ''),",
      "context": [
        "                            self.shared_did_configs[shared_did] = []",
        "                        self.shared_did_configs[shared_did].append({",
        "                            'agent_name': agent_name,",
        "                            'path_prefix': share_did_config.get('path_prefix', ''),",
        "                            'file_path': mapping_file,",
        "                            'api_paths': [api.get('path', '') for api in config.get('api', [])]",
        "                        })"
      ],
      "function": "load_agent_mappings",
      "class": "AgentUserBindingManager",
      "full_match": "config.get"
    },
    {
      "file": "scripts/agent_user_binding.py",
      "line": 107,
      "type": "config_attribute_access",
      "config_key": "get",
      "code": "'api_paths': [api.get('path', '') for api in config.get('api', [])]",
      "context": [
        "                            'agent_name': agent_name,",
        "                            'path_prefix': share_did_config.get('path_prefix', ''),",
        "                            'file_path': mapping_file,",
        "                            'api_paths': [api.get('path', '') for api in config.get('api', [])]",
        "                        })",
        "                    ",
        "                except Exception as e:"
      ],
      "function": "load_agent_mappings",
      "class": "AgentUserBindingManager",
      "full_match": "config.get"
    }
  ],
  "dependency_injection_analysis": {
    "total_usages": 167,
    "files_count": 23,
    "config_keys_used": [
      "_data",
      "agent_002.agent_register",
      "anp_sdk",
      "anp_sdk.debug_mode",
      "anp_sdk.host",
      "anp_sdk.jwt_algorithm",
      "anp_sdk.nonce_expire_minutes",
      "anp_sdk.port",
      "anp_sdk.token_expire_time",
      "anp_sdk.user_did_key_id",
      "anp_sdk.user_did_path",
      "anp_sdk.user_hosted_path",
      "anp_user_service.api_base",
      "anp_user_service.model_name",
      "apiBase",
      "apiKey",
      "auth_middleware.exempt_paths",
      "default.yaml",
      "detail",
      "did_config.creatable_user_types",
      "did_config.format_template",
      "did_config.hosts",
      "did_config.insecure_patterns",
      "did_config.method",
      "did_config.parsing.allow_insecure",
      "did_config.parsing.default_host",
      "did_config.parsing.default_port",
      "did_config.user_types",
      "dynamic_config",
      "get",
      "hosts",
      "legacy.dynamic_config",
      "llm.api_url",
      "log_settings",
      "model",
      "py",
      "resolve_path",
      "secrets.openai_api_key",
      "unified_config",
      "yaml"
    ],
    "usage_types_summary": {
      "get_global_config": 82,
      "config_attribute_access": 84,
      "getattr_config_access": 1
    },
    "injection_opportunities": [
      {
        "file": "data_user/localhost_9527/agents_config/agent_llm/agent_handlers.py",
        "type": "function_parameter_injection",
        "functions": [
          "initialize_agent"
        ],
        "usage_count": 6,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 2
        },
        "suggestion": "为 initialize_agent 函数添加 config 参数"
      },
      {
        "file": "data_user/localhost_9527/agents_config/orchestrator_agent/agent_handlers.py",
        "type": "function_parameter_injection",
        "functions": [
          "run_agent_002_demo_new"
        ],
        "usage_count": 1,
        "usage_types": {
          "config_attribute_access": 1
        },
        "suggestion": "为 run_agent_002_demo_new 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_runtime/agent_manager.py",
        "type": "class_constructor_injection",
        "classes": [
          "AgentRouter",
          "LocalAgentManager"
        ],
        "usage_count": 8,
        "usage_types": {
          "config_attribute_access": 8
        },
        "suggestion": "为 AgentRouter, LocalAgentManager 类添加 config 参数到构造函数"
      },
      {
        "file": "anp-open-sdk-python/anp_runtime/agent_manager.py",
        "type": "function_parameter_injection",
        "functions": [
          "_register_message_handlers_new",
          "_resolve_shared_did",
          "load_agent_from_module"
        ],
        "usage_count": 8,
        "usage_types": {
          "config_attribute_access": 8
        },
        "suggestion": "为 _register_message_handlers_new, _resolve_shared_did, load_agent_from_module 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
        "type": "class_constructor_injection",
        "classes": [
          "ANP_Server"
        ],
        "usage_count": 11,
        "usage_types": {
          "get_global_config": 8,
          "config_attribute_access": 3
        },
        "suggestion": "为 ANP_Server 类添加 config 参数到构造函数"
      },
      {
        "file": "anp-open-sdk-python/anp_server/run_lite_server_template.py",
        "type": "function_parameter_injection",
        "functions": [
          "start_server",
          "__init__"
        ],
        "usage_count": 11,
        "usage_types": {
          "get_global_config": 8,
          "config_attribute_access": 3
        },
        "suggestion": "为 start_server, __init__ 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
        "type": "class_constructor_injection",
        "classes": [
          "ANP_Server"
        ],
        "usage_count": 11,
        "usage_types": {
          "get_global_config": 8,
          "config_attribute_access": 3
        },
        "suggestion": "为 ANP_Server 类添加 config 参数到构造函数"
      },
      {
        "file": "anp-open-sdk-python/anp_server/baseline/anp_server_baseline.py",
        "type": "function_parameter_injection",
        "functions": [
          "start_server",
          "__init__"
        ],
        "usage_count": 11,
        "usage_types": {
          "get_global_config": 8,
          "config_attribute_access": 3
        },
        "suggestion": "为 start_server, __init__ 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_servicepoint/extend_service_implementation/did_host/did_host_manager.py",
        "type": "class_constructor_injection",
        "classes": [
          "DIDHostManager"
        ],
        "usage_count": 5,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 1
        },
        "suggestion": "为 DIDHostManager 类添加 config 参数到构造函数"
      },
      {
        "file": "anp-open-sdk-python/anp_servicepoint/extend_service_implementation/did_host/did_host_manager.py",
        "type": "function_parameter_injection",
        "functions": [
          "__init__"
        ],
        "usage_count": 5,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 1
        },
        "suggestion": "为 __init__ 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_servicepoint/core_service_handler/agent_service_handler.py",
        "type": "function_parameter_injection",
        "functions": [
          "process_agent_api_request",
          "process_agent_message",
          "process_group_request"
        ],
        "usage_count": 20,
        "usage_types": {
          "get_global_config": 8,
          "config_attribute_access": 12
        },
        "suggestion": "为 process_agent_api_request, process_agent_message, process_group_request 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
        "type": "class_constructor_injection",
        "classes": [
          "LocalUserDataManager"
        ],
        "usage_count": 12,
        "usage_types": {
          "get_global_config": 8,
          "config_attribute_access": 4
        },
        "suggestion": "为 LocalUserDataManager 类添加 config 参数到构造函数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/anp_user_local_data.py",
        "type": "function_parameter_injection",
        "functions": [
          "load_all_users",
          "load_single_user",
          "__init__",
          "create_did_user"
        ],
        "usage_count": 12,
        "usage_types": {
          "get_global_config": 8,
          "config_attribute_access": 4
        },
        "suggestion": "为 load_all_users, load_single_user, __init__, create_did_user 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/anp_user.py",
        "type": "class_constructor_injection",
        "classes": [
          "ANPUser"
        ],
        "usage_count": 5,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 1
        },
        "suggestion": "为 ANPUser 类添加 config 参数到构造函数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/anp_user.py",
        "type": "function_parameter_injection",
        "functions": [
          "__init__"
        ],
        "usage_count": 5,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 1
        },
        "suggestion": "为 __init__ 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/did/did_tool.py",
        "type": "class_constructor_injection",
        "classes": [
          "AuthenticationContext"
        ],
        "usage_count": 9,
        "usage_types": {
          "get_global_config": 6,
          "config_attribute_access": 3
        },
        "suggestion": "为 AuthenticationContext 类添加 config 参数到构造函数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/did/did_tool.py",
        "type": "function_parameter_injection",
        "functions": [
          "create_access_token",
          "verify_timestamp"
        ],
        "usage_count": 9,
        "usage_types": {
          "get_global_config": 6,
          "config_attribute_access": 3
        },
        "suggestion": "为 create_access_token, verify_timestamp 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/did/did_format_manager.py",
        "type": "class_constructor_injection",
        "classes": [
          "DidFormatManager"
        ],
        "usage_count": 9,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 5
        },
        "suggestion": "为 DidFormatManager 类添加 config 参数到构造函数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/did/did_format_manager.py",
        "type": "function_parameter_injection",
        "functions": [
          "can_create_user_type",
          "__init__",
          "_get_format_template",
          "_get_method",
          "get_supported_user_types",
          "get_creatable_user_types"
        ],
        "usage_count": 9,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 5
        },
        "suggestion": "为 can_create_user_type, __init__, _get_format_template, _get_method, get_supported_user_types, get_creatable_user_types 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/config/unified_config.py",
        "type": "class_constructor_injection",
        "classes": [
          "UnifiedConfig"
        ],
        "usage_count": 4,
        "usage_types": {
          "get_global_config": 1,
          "config_attribute_access": 3
        },
        "suggestion": "为 UnifiedConfig 类添加 config 参数到构造函数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/config/unified_config.py",
        "type": "function_parameter_injection",
        "functions": [
          "_get_default_config",
          "_resolve_config_file",
          "get_global_config",
          "_process_path_list"
        ],
        "usage_count": 4,
        "usage_types": {
          "get_global_config": 1,
          "config_attribute_access": 3
        },
        "suggestion": "为 _get_default_config, _resolve_config_file, get_global_config, _process_path_list 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/auth/auth_verifier.py",
        "type": "function_parameter_injection",
        "functions": [
          "_generate_wba_auth_response",
          "is_valid_server_nonce",
          "_verify_bearer_token"
        ],
        "usage_count": 11,
        "usage_types": {
          "get_global_config": 8,
          "config_attribute_access": 3
        },
        "suggestion": "为 _generate_wba_auth_response, is_valid_server_nonce, _verify_bearer_token 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/utils/log_base.py",
        "type": "class_constructor_injection",
        "classes": [
          "ColoredFormatter"
        ],
        "usage_count": 8,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 3,
          "getattr_config_access": 1
        },
        "suggestion": "为 ColoredFormatter 类添加 config 参数到构造函数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/utils/log_base.py",
        "type": "function_parameter_injection",
        "functions": [
          "setup_logging"
        ],
        "usage_count": 8,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 3,
          "getattr_config_access": 1
        },
        "suggestion": "为 setup_logging 函数添加 config 参数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
        "type": "class_constructor_injection",
        "classes": [
          "DomainManager"
        ],
        "usage_count": 12,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 8
        },
        "suggestion": "为 DomainManager 类添加 config 参数到构造函数"
      },
      {
        "file": "anp-open-sdk-python/anp_foundation/domain/domain_manager.py",
        "type": "function_parameter_injection",
        "functions": [
          "__init__",
          "supported_domains",
          "validate_domain_access",
          "_get_default_host_port",
          "get_all_data_paths"
        ],
        "usage_count": 12,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 8
        },
        "suggestion": "为 __init__, supported_domains, validate_domain_access, _get_default_host_port, get_all_data_paths 函数添加 config 参数"
      },
      {
        "file": "examples/flow_host_did/demo_complete_flow.py",
        "type": "class_constructor_injection",
        "classes": [
          "HostedDIDDemo"
        ],
        "usage_count": 2,
        "usage_types": {
          "config_attribute_access": 2
        },
        "suggestion": "为 HostedDIDDemo 类添加 config 参数到构造函数"
      },
      {
        "file": "examples/flow_host_did/demo_complete_flow.py",
        "type": "function_parameter_injection",
        "functions": [
          "main"
        ],
        "usage_count": 2,
        "usage_types": {
          "config_attribute_access": 2
        },
        "suggestion": "为 main 函数添加 config 参数"
      },
      {
        "file": "examples/flow_anp_user_portal/anp_user_service/app/routers/chat.py",
        "type": "function_parameter_injection",
        "functions": [
          "chat_with_personal_agent"
        ],
        "usage_count": 3,
        "usage_types": {
          "config_attribute_access": 3
        },
        "suggestion": "为 chat_with_personal_agent 函数添加 config 参数"
      },
      {
        "file": "examples/flow_anp_user_portal/anp_user_service/app/core/config.py",
        "type": "function_parameter_injection",
        "functions": [
          "get_anp_user_base_path"
        ],
        "usage_count": 4,
        "usage_types": {
          "config_attribute_access": 4
        },
        "suggestion": "为 get_anp_user_base_path 函数添加 config 参数"
      },
      {
        "file": "examples/flow_anp_user_portal/anp_user_service/app/services/llm_service.py",
        "type": "function_parameter_injection",
        "functions": [
          "get_llm_response_with_rag"
        ],
        "usage_count": 3,
        "usage_types": {
          "config_attribute_access": 3
        },
        "suggestion": "为 get_llm_response_with_rag 函数添加 config 参数"
      },
      {
        "file": "examples/flow_anp_agent/flow_anp_agent.py",
        "type": "class_constructor_injection",
        "classes": [
          "WeatherAgent"
        ],
        "usage_count": 6,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 2
        },
        "suggestion": "为 WeatherAgent 类添加 config 参数到构造函数"
      },
      {
        "file": "examples/flow_anp_agent/flow_anp_agent.py",
        "type": "function_parameter_injection",
        "functions": [
          "main"
        ],
        "usage_count": 6,
        "usage_types": {
          "get_global_config": 4,
          "config_attribute_access": 2
        },
        "suggestion": "为 main 函数添加 config 参数"
      },
      {
        "file": "scripts/agent_user_binding.py",
        "type": "class_constructor_injection",
        "classes": [
          "AgentUserBindingManager"
        ],
        "usage_count": 8,
        "usage_types": {
          "get_global_config": 1,
          "config_attribute_access": 7
        },
        "suggestion": "为 AgentUserBindingManager 类添加 config 参数到构造函数"
      },
      {
        "file": "scripts/agent_user_binding.py",
        "type": "function_parameter_injection",
        "functions": [
          "load_agent_mappings"
        ],
        "usage_count": 8,
        "usage_types": {
          "get_global_config": 1,
          "config_attribute_access": 7
        },
        "suggestion": "为 load_agent_mappings 函数添加 config 参数"
      }
    ],
    "refactor_suggestions": []
  },
  "config_usage_patterns": {
    "used_sections": {
      "root": [
        "_data",
        "anp_sdk",
        "apiBase",
        "apiKey",
        "detail",
        "dynamic_config",
        "get",
        "hosts",
        "log_settings",
        "model",
        "py",
        "resolve_path",
        "unified_config",
        "yaml"
      ],
      "anp_sdk": [
        "anp_sdk.debug_mode",
        "anp_sdk.host",
        "anp_sdk.jwt_algorithm",
        "anp_sdk.nonce_expire_minutes",
        "anp_sdk.port",
        "anp_sdk.token_expire_time",
        "anp_sdk.user_did_key_id",
        "anp_sdk.user_did_path",
        "anp_sdk.user_hosted_path"
      ],
      "llm": [
        "llm.api_url"
      ],
      "did_config": [
        "did_config.creatable_user_types",
        "did_config.format_template",
        "did_config.hosts",
        "did_config.insecure_patterns",
        "did_config.method",
        "did_config.parsing.allow_insecure",
        "did_config.parsing.default_host",
        "did_config.parsing.default_port",
        "did_config.user_types"
      ],
      "auth_middleware": [
        "auth_middleware.exempt_paths"
      ],
      "secrets": [
        "secrets.openai_api_key"
      ],
      "anp_user_service": [
        "anp_user_service.api_base",
        "anp_user_service.model_name"
      ],
      "default": [
        "default.yaml"
      ],
      "agent_002": [
        "agent_002.agent_register"
      ],
      "legacy": [
        "legacy.dynamic_config"
      ]
    },
    "unused_sections_suggestion": [
      "env_mapping",
      "env_types",
      "mail",
      "multi_agent_mode",
      "path_config"
    ],
    "optimization_suggestions": [
      "高频使用配置的文件 (13 个) 建议优先进行依赖注入改造: data_user/localhost_9527/agents_config/agent_llm/agent_handlers.py, anp-open-sdk-python/anp_runtime/agent_manager.py, anp-open-sdk-python/anp_server/run_lite_server_template.py...",
      "发现 1 处动态配置访问，建议转换为静态属性访问以提高代码可读性"
    ],
    "dynamic_access_analysis": {
      "total_dynamic_accesses": 1,
      "dynamic_access_files": [
        "anp-open-sdk-python/anp_foundation/utils/log_base.py"
      ],
      "dynamic_attributes": [
        "log_settings"
      ],
      "suggestions": [
        "动态属性访问使得配置依赖不够明确，建议转换为直接属性访问",
        "考虑为动态访问的属性创建明确的配置接口"
      ]
    }
  },
  "refactor_recommendations": [
    {
      "type": "constructor_injection",
      "target": "LocalAgentManager",
      "priority": "high",
      "usage_count": 7,
      "usage_types": {
        "config_attribute_access": 7
      },
      "description": "类 LocalAgentManager 中使用了 7 次配置，建议在构造函数中注入",
      "example_code": "\nclass LocalAgentManager:\n    def __init__(self, config: Optional[UnifiedConfig] = None):\n        self.config = config or get_global_config()\n        # ... rest of init ...\n"
    },
    {
      "type": "constructor_injection",
      "target": "ANP_Server",
      "priority": "high",
      "usage_count": 18,
      "usage_types": {
        "get_global_config": 12,
        "config_attribute_access": 6
      },
      "description": "类 ANP_Server 中使用了 18 次配置，建议在构造函数中注入",
      "example_code": "\nclass ANP_Server:\n    def __init__(self, config: Optional[UnifiedConfig] = None):\n        self.config = config or get_global_config()\n        # ... rest of init ...\n"
    },
    {
      "type": "constructor_injection",
      "target": "DIDHostManager",
      "priority": "high",
      "usage_count": 3,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 1
      },
      "description": "类 DIDHostManager 中使用了 3 次配置，建议在构造函数中注入",
      "example_code": "\nclass DIDHostManager:\n    def __init__(self, config: Optional[UnifiedConfig] = None):\n        self.config = config or get_global_config()\n        # ... rest of init ...\n"
    },
    {
      "type": "constructor_injection",
      "target": "LocalUserDataManager",
      "priority": "high",
      "usage_count": 10,
      "usage_types": {
        "get_global_config": 6,
        "config_attribute_access": 4
      },
      "description": "类 LocalUserDataManager 中使用了 10 次配置，建议在构造函数中注入",
      "example_code": "\nclass LocalUserDataManager:\n    def __init__(self, config: Optional[UnifiedConfig] = None):\n        self.config = config or get_global_config()\n        # ... rest of init ...\n"
    },
    {
      "type": "constructor_injection",
      "target": "ANPUser",
      "priority": "high",
      "usage_count": 3,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 1
      },
      "description": "类 ANPUser 中使用了 3 次配置，建议在构造函数中注入",
      "example_code": "\nclass ANPUser:\n    def __init__(self, config: Optional[UnifiedConfig] = None):\n        self.config = config or get_global_config()\n        # ... rest of init ...\n"
    },
    {
      "type": "constructor_injection",
      "target": "AuthenticationContext",
      "priority": "high",
      "usage_count": 7,
      "usage_types": {
        "get_global_config": 4,
        "config_attribute_access": 3
      },
      "description": "类 AuthenticationContext 中使用了 7 次配置，建议在构造函数中注入",
      "example_code": "\nclass AuthenticationContext:\n    def __init__(self, config: Optional[UnifiedConfig] = None):\n        self.config = config or get_global_config()\n        # ... rest of init ...\n"
    },
    {
      "type": "constructor_injection",
      "target": "DidFormatManager",
      "priority": "high",
      "usage_count": 7,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 5
      },
      "description": "类 DidFormatManager 中使用了 7 次配置，建议在构造函数中注入",
      "example_code": "\nclass DidFormatManager:\n    def __init__(self, config: Optional[UnifiedConfig] = None):\n        self.config = config or get_global_config()\n        # ... rest of init ...\n"
    },
    {
      "type": "constructor_injection",
      "target": "UnifiedConfig",
      "priority": "high",
      "usage_count": 3,
      "usage_types": {
        "config_attribute_access": 3
      },
      "description": "类 UnifiedConfig 中使用了 3 次配置，建议在构造函数中注入",
      "example_code": "\nclass UnifiedConfig:\n    def __init__(self, config: Optional[UnifiedConfig] = None):\n        self.config = config or get_global_config()\n        # ... rest of init ...\n"
    },
    {
      "type": "constructor_injection",
      "target": "ColoredFormatter",
      "priority": "high",
      "usage_count": 6,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 3,
        "getattr_config_access": 1
      },
      "description": "类 ColoredFormatter 中使用了 6 次配置，建议在构造函数中注入",
      "example_code": "\nclass ColoredFormatter:\n    def __init__(self, config: Optional[UnifiedConfig] = None):\n        self.config = config or get_global_config()\n        # ... rest of init ...\n"
    },
    {
      "type": "constructor_injection",
      "target": "DomainManager",
      "priority": "high",
      "usage_count": 10,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 8
      },
      "description": "类 DomainManager 中使用了 10 次配置，建议在构造函数中注入",
      "example_code": "\nclass DomainManager:\n    def __init__(self, config: Optional[UnifiedConfig] = None):\n        self.config = config or get_global_config()\n        # ... rest of init ...\n"
    },
    {
      "type": "constructor_injection",
      "target": "WeatherAgent",
      "priority": "high",
      "usage_count": 4,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 2
      },
      "description": "类 WeatherAgent 中使用了 4 次配置，建议在构造函数中注入",
      "example_code": "\nclass WeatherAgent:\n    def __init__(self, config: Optional[UnifiedConfig] = None):\n        self.config = config or get_global_config()\n        # ... rest of init ...\n"
    },
    {
      "type": "constructor_injection",
      "target": "AgentUserBindingManager",
      "priority": "high",
      "usage_count": 7,
      "usage_types": {
        "config_attribute_access": 7
      },
      "description": "类 AgentUserBindingManager 中使用了 7 次配置，建议在构造函数中注入",
      "example_code": "\nclass AgentUserBindingManager:\n    def __init__(self, config: Optional[UnifiedConfig] = None):\n        self.config = config or get_global_config()\n        # ... rest of init ...\n"
    },
    {
      "type": "function_parameter_injection",
      "target": "initialize_agent",
      "priority": "medium",
      "usage_count": 4,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 2
      },
      "description": "函数 initialize_agent 中使用了 4 次配置，建议添加配置参数",
      "example_code": "\ndef initialize_agent(..., config: Optional[UnifiedConfig] = None):\n    config = config or get_global_config()\n    # ... rest of function ...\n"
    },
    {
      "type": "function_parameter_injection",
      "target": "process_group_request",
      "priority": "medium",
      "usage_count": 6,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 4
      },
      "description": "函数 process_group_request 中使用了 6 次配置，建议添加配置参数",
      "example_code": "\ndef process_group_request(..., config: Optional[UnifiedConfig] = None):\n    config = config or get_global_config()\n    # ... rest of function ...\n"
    },
    {
      "type": "function_parameter_injection",
      "target": "process_agent_api_request",
      "priority": "medium",
      "usage_count": 6,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 4
      },
      "description": "函数 process_agent_api_request 中使用了 6 次配置，建议添加配置参数",
      "example_code": "\ndef process_agent_api_request(..., config: Optional[UnifiedConfig] = None):\n    config = config or get_global_config()\n    # ... rest of function ...\n"
    },
    {
      "type": "function_parameter_injection",
      "target": "process_agent_message",
      "priority": "medium",
      "usage_count": 6,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 4
      },
      "description": "函数 process_agent_message 中使用了 6 次配置，建议添加配置参数",
      "example_code": "\ndef process_agent_message(..., config: Optional[UnifiedConfig] = None):\n    config = config or get_global_config()\n    # ... rest of function ...\n"
    },
    {
      "type": "function_parameter_injection",
      "target": "_verify_bearer_token",
      "priority": "medium",
      "usage_count": 3,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 1
      },
      "description": "函数 _verify_bearer_token 中使用了 3 次配置，建议添加配置参数",
      "example_code": "\ndef _verify_bearer_token(..., config: Optional[UnifiedConfig] = None):\n    config = config or get_global_config()\n    # ... rest of function ...\n"
    },
    {
      "type": "function_parameter_injection",
      "target": "is_valid_server_nonce",
      "priority": "medium",
      "usage_count": 3,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 1
      },
      "description": "函数 is_valid_server_nonce 中使用了 3 次配置，建议添加配置参数",
      "example_code": "\ndef is_valid_server_nonce(..., config: Optional[UnifiedConfig] = None):\n    config = config or get_global_config()\n    # ... rest of function ...\n"
    },
    {
      "type": "function_parameter_injection",
      "target": "_generate_wba_auth_response",
      "priority": "medium",
      "usage_count": 3,
      "usage_types": {
        "get_global_config": 2,
        "config_attribute_access": 1
      },
      "description": "函数 _generate_wba_auth_response 中使用了 3 次配置，建议添加配置参数",
      "example_code": "\ndef _generate_wba_auth_response(..., config: Optional[UnifiedConfig] = None):\n    config = config or get_global_config()\n    # ... rest of function ...\n"
    },
    {
      "type": "function_parameter_injection",
      "target": "chat_with_personal_agent",
      "priority": "medium",
      "usage_count": 3,
      "usage_types": {
        "config_attribute_access": 3
      },
      "description": "函数 chat_with_personal_agent 中使用了 3 次配置，建议添加配置参数",
      "example_code": "\ndef chat_with_personal_agent(..., config: Optional[UnifiedConfig] = None):\n    config = config or get_global_config()\n    # ... rest of function ...\n"
    },
    {
      "type": "function_parameter_injection",
      "target": "get_llm_response_with_rag",
      "priority": "medium",
      "usage_count": 3,
      "usage_types": {
        "config_attribute_access": 3
      },
      "description": "函数 get_llm_response_with_rag 中使用了 3 次配置，建议添加配置参数",
      "example_code": "\ndef get_llm_response_with_rag(..., config: Optional[UnifiedConfig] = None):\n    config = config or get_global_config()\n    # ... rest of function ...\n"
    }
  ]
}